{"version":3,"sources":["services/getWeb3.js","components/PageComponents/Nav.js","components/TokenComponents/Wallet.js","components/CollectibleComponents/CollectibleModal.js","components/CollectibleComponents/Collectible.js","components/CollectibleComponents/RegisterModal.js","components/CollectibleComponents/Market.js","components/TokenComponents/Trade.js","components/TokenComponents/Staking.js","components/PageComponents/Header.js","App.js","services/serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","async","ethereum","web3","Web3","enable","error","console","log","provider","providers","HttpProvider","Nav","className","to","Wallet","account","balance","useState","undefined","transactions","setTransactions","useEffect","latestBlockIndex","eth","getBlockNumber","i","getBlock","forEach","transaction","from","push","retrieveTransactions","style","listStyleType","slice","map","key","hash","width","border","display","boxSizing","marginLeft","float","color","marginRight","value","Modal","setAppElement","CollectibleModal","collectible","collectibleModalState","setCollectibleModalState","onBuyRequest","onUpdatePrice","onBurnRequest","fee","isOwner","setOwner","priceOfCollectible","price","setPrice","availability","setAvailability","modalState","setModalState","tokenOwner","onClick","e","stopPropagation","isOpen","shouldCloseOnEsc","onRequestClose","centered","overlay","opacity","content","borderRadius","backgroundColor","height","margin","src","tokenURI","priceLevel","textAlign","fontWeight","tokenDescription","tokenCreator","collectibleHash","marginTop","id","onSubmit","preventDefault","type","required","onChange","target","padding","Collectible","onBuy","onSetPrice","onBurn","changeModalState","justifyContent","cursor","tokenID","newPrice","RegisterModal","onRegister","setTokenURI","description","setDescription","shouldCloseOnOverlayClick","Market","contract","collectibles","setCollectibles","refresh","setRefresh","sort","setSort","setFee","navigate","useNavigate","getAllNFTs","methods","getCollectibleFee","call","tokenCount","getTokenCount","getTokenURI","getTokenOwner","getTokenCreator","getTokenDescription","getPriceOfCollectible","getTokenHash","getAvailabilityOfToken","buyCollectible","send","find","setPriceOfCollectible","setAvailabilityOfCollectible","burnCollectible","sortedArr","a","b","registerNewCollectible","Trade","ethBalance","getBalance","depositAmount","setDepositAmount","depositPrice","setDepositPrice","withdrawAmount","setWithdrawAmount","withdrawPrice","setWithdrawPrice","response","getTokenPrice","fetchCurrentTokenPrice","deposit","toString","withdraw","Staking","stakeDuration","setStakeDuration","stakedDuration","setStakedDuration","stakedBalance","setStakedBalance","stakeReward","setStakeReward","calculatedStakeReward","setCalculatedStakeReward","interestRate","setInterestRate","availableStake","setAvailableStake","getStakedAmount","getCurrentStakeReward","getStakeCompletionDate","getInterest","getContractBalance","calculateStakeReward","getStakeAmount","date","Date","toLocaleDateString","time","toLocaleTimeString","stakeRate","currentTimeStamp","Math","round","getTime","checkStakeStatus","alert","stake","Header","connect","App","setWeb3","accounts","setAccounts","setContract","setBalance","setEthBalance","componentDidMount","getAccounts","networkId","net","getId","deployedNetwork","BerkToken","networks","instance","Contract","abi","address","utils","fromWei","location","reload","path","element","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3cd3d52.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n\n        //App.web3Provider = web3.currentProvider;\n        //web3 = new Web3(web3.currentProvider);\n\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import { Link } from 'react-router-dom'\r\nimport React from 'react';\r\nconst Nav = () => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <ul className=\"nav\">\r\n                    <li className=\"nav\"><Link to=\"/berkcoin/wallet\">Wallet</Link></li>\r\n                    <li className=\"nav\"><Link to=\"/berkcoin/market\">Market</Link></li>\r\n                    <li className=\"nav\"><Link to=\"/berkcoin/trade\">Trade</Link></li>\r\n                    <li className=\"nav\"><Link to=\"/berkcoin/staking\">Staking</Link></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav","import React, { useEffect, useState } from 'react';\r\n\r\nconst Wallet = ({ web3, account, balance }) => {\r\n    const [transactions, setTransactions] = useState(undefined);\r\n    useEffect(() => {\r\n        const retrieveTransactions = async () => {\r\n            const transactions = [];\r\n            const latestBlockIndex = await web3.eth.getBlockNumber();\r\n            for (var i = 0; i < 5; i++) {\r\n                const block = await web3.eth.getBlock(latestBlockIndex - i, true);\r\n                block.transactions.forEach((transaction) => {\r\n                    if (transaction.from === account) {\r\n                        transactions.push(transaction);\r\n                    }\r\n                })\r\n            }\r\n            setTransactions(transactions);\r\n        }\r\n        retrieveTransactions();\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <h3>Wallet Public Address: {account}</h3>\r\n            <h3>Wallet Balance: {balance}</h3>\r\n            <h3>Your Latest Transactions:</h3>\r\n            <ul style={{ listStyleType: \"none\" }}>\r\n                {transactions != undefined && transactions.slice(0).map((transaction) => (\r\n                    <li key={transaction.hash} style={{ width: \"80%\", border: \"1px solid black\", display: \"inline-block\", boxSizing: \"border-box\" }}>\r\n                        <p><span style={{ marginLeft: \"3%\" }}>Hash: {transaction.hash}</span><span style={{ float: \"right\", color: \"green\", marginRight: \"3%\" }}>Value: {transaction.value / (10 ** 18)}</span></p>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Wallet","import React, { useState, useEffect } from 'react'\r\nimport Modal from \"react-modal\";\r\nModal.setAppElement('#root');\r\n\r\nexport const CollectibleModal = ({ account, collectible, collectibleModalState, setCollectibleModalState, onBuyRequest, onUpdatePrice, onBurnRequest, fee }) => {\r\n    const [isOwner, setOwner] = useState(false);\r\n    const [price, setPrice] = useState(collectible.priceOfCollectible);\r\n    const [availability, setAvailability] = useState(false);\r\n    const [modalState, setModalState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (collectible.tokenOwner === account) {\r\n            setOwner(true);\r\n        }\r\n    }, []);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onUpdatePrice(price, availability);\r\n        setModalState(!modalState);\r\n    }\r\n\r\n    return (\r\n        <div onClick={(e) => e.stopPropagation()}>\r\n            <Modal isOpen={collectibleModalState}\r\n                shouldCloseOnEsc={true}\r\n                onRequestClose={setCollectibleModalState}\r\n                centered\r\n                style={\r\n                    {\r\n                        overlay: {\r\n                            opacity: \"1\"\r\n                        },\r\n                        content: {\r\n                            borderRadius: \"4%\",\r\n                            backgroundColor: \"#9BB7D4\",\r\n                            width: \"33%\",\r\n                            height: \"60%\",\r\n                            margin: \"auto\"\r\n                        },\r\n                    }\r\n                }>\r\n                <div>\r\n                    <img style={{ width: \"250px\", height: \"250px\", borderRadius: \"10%\", display: \"flex\", margin: \"0 auto\" }} src={collectible.tokenURI} />\r\n                    <p style={{ color: collectible.priceLevel, textAlign: \"center\", fontWeight: \"bold\" }}>{collectible.tokenDescription}</p>\r\n                    <p style={{ color: collectible.priceLevel, textAlign: \"center\", fontWeight: \"bold\" }}>{collectible.priceOfCollectible} berkcoins</p>\r\n                    <p style={{ color: \"blue\", textAlign: \"center\", fontWeight: \"bold\" }}>Created By: {collectible.tokenCreator}</p>\r\n                    <p style={{ color: \"blue\", textAlign: \"center\", fontWeight: \"bold\" }}>Owner: {collectible.tokenOwner} {isOwner && <span>(you)</span>}</p>\r\n                    <p style={{ color: \"blue\", textAlign: \"center\", fontWeight: \"bold\" }}>Collectible Hash: {collectible.collectibleHash}</p>\r\n                    {isOwner && <button style={{ float: \"left\", marginTop: \"6%\" }} onClick={() => setModalState(!modalState)}>Update Collectible</button>}\r\n                    {!isOwner && collectible.availability === true && <button style={{ float: \"left\", marginTop: \"6%\" }} onClick={onBuyRequest}>Buy Collectible</button>}\r\n                    <button style={{ float: \"right\", marginTop: \"6%\" }} onClick={setCollectibleModalState}>Close</button>\r\n                </div>\r\n\r\n                <Modal isOpen={modalState}\r\n                    shouldCloseOnEsc={true}\r\n                    onRequestClose={() => setModalState(!modalState)}\r\n                    centered\r\n                    style={\r\n                        {\r\n                            overlay: {\r\n                                opacity: \"1\"\r\n                            },\r\n                            content: {\r\n                                borderRadius: \"4%\",\r\n                                backgroundColor: \"#9BB7D4\",\r\n                                width: \"28%\",\r\n                                height: \"38%\",\r\n                                margin: \"auto\"\r\n                            },\r\n                        }\r\n                    }>\r\n\r\n                    <div >\r\n                        <button style={{ float: \"right\" }} onClick={() => setModalState(!modalState)}>Close</button>\r\n                        <h2>Update Collectible:</h2>\r\n                        <form id=\"newOrder\" onSubmit={onSubmit}>\r\n                            <label>Enter a new price (berkcoins): </label>\r\n                            <input type=\"number\" required\r\n                                value={price} onChange={(e) => setPrice(e.target.value)} />\r\n                            <input style={{ float: \"right\", margin: \"0\", padding: \"0\", marginTop: \"2%\" }} type=\"checkbox\"\r\n                                value={availability} onChange={(e) => setAvailability(!availability)} />\r\n                            <label style={{ display: \"inline\" }}>Set available: </label>\r\n                            <h3 style={{ textAlign: \"center\" }}>Collectible will {!availability && \"not\"} be listed as available for trade.</h3>\r\n                            {price !== 0 && <h3 style={{ color: \"red\", textAlign: \"center\" }}>You will pay {fee} berkcoins price update fee.</h3>}\r\n                            <button style={{ float: \"right\", display: \"flex\", margin: \"auto\" }}>Update</button>\r\n                        </form>\r\n                        <button style={{ float: \"left\", color: \"red\" }} onClick={onBurnRequest}>Burn Collectible</button>\r\n                    </div>\r\n                </Modal>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { CollectibleModal } from './CollectibleModal';\r\n\r\nconst Collectible = ({ account, collectible, onBuy, onSetPrice, onBurn, fee }) => {\r\n    const [collectibleModalState, setCollectibleModalState] = useState(false);\r\n\r\n    const changeModalState = () => {\r\n        setCollectibleModalState(!collectibleModalState);\r\n    }\r\n\r\n    const onBuyRequest = () => {\r\n        onBuy(collectible.tokenID);\r\n    }\r\n\r\n    const onUpdatePrice = (newPrice, availability) => {\r\n        onSetPrice(collectible.tokenID, newPrice, availability);\r\n    }\r\n\r\n    const onBurnRequest = () => {\r\n        onBurn(collectible.tokenID);\r\n        changeModalState();\r\n    }\r\n\r\n    return (\r\n\r\n        <div onClick={changeModalState} style={{ display: \"flex\", justifyContent: \"center\", margin: \"3%\", backgroundColor: \"#9BB7D4\", width: \"300px\", height: \"390px\", borderRadius: \"4%\", float: \"left\", cursor: \"pointer\" }}>\r\n            {collectibleModalState === true &&\r\n                <CollectibleModal\r\n                    account={account}\r\n                    collectible={collectible}\r\n                    collectibleModalState={collectibleModalState}\r\n                    setCollectibleModalState={changeModalState}\r\n                    onBuyRequest={onBuyRequest}\r\n                    onUpdatePrice={onUpdatePrice}\r\n                    onBurnRequest={onBurnRequest}\r\n                    fee={fee}\r\n                />\r\n            }\r\n            <div style={{ margin: \"15px\" }}>\r\n                <li key={collectible.tokenID}>\r\n                    <img style={{ width: \"250px\", height: \"250px\", borderRadius: \"10%\" }} src={collectible.tokenURI} />\r\n                    <p style={{ color: collectible.priceLevel, textAlign: \"center\", fontWeight: \"bold\" }}>{collectible.tokenDescription}</p>\r\n                    <p style={{ color: collectible.priceLevel, textAlign: \"center\", fontWeight: \"bold\" }}>{collectible.priceOfCollectible} berkcoins</p>\r\n                    {collectible.availability === true && <p style={{ color: \"blue\", textAlign: \"center\", fontWeight: \"bold\" }}>(On sale)</p>}\r\n                </li>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Collectible","import React, { useState } from 'react'\r\nimport Modal from \"react-modal\";\r\nModal.setAppElement('#root');\r\n\r\nconst RegisterModal = ({ modalState, setModalState, onRegister, fee }) => {\r\n    const [tokenURI, setTokenURI] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [price, setPrice] = useState(0);\r\n    const [availability, setAvailability] = useState(false);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onRegister(tokenURI, description, price, availability);\r\n        setTokenURI(\"\");\r\n        setDescription(\"\");\r\n        setPrice(0);\r\n        setModalState();\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <Modal isOpen={modalState}\r\n                shouldCloseOnOverlayClick={true}\r\n                shouldCloseOnEsc={true}\r\n                onRequestClose={setModalState}\r\n                centered\r\n                style={\r\n                    {\r\n                        overlay: {\r\n                            opacity: \"1\"\r\n                        },\r\n                        content: {\r\n                            borderRadius: \"4%\",\r\n                            backgroundColor: \"#9BB7D4\",\r\n                            width: \"35%\",\r\n                            height: \"60%\",\r\n                            margin: \"auto\"\r\n                        },\r\n                    }\r\n                }>\r\n                <button style={{ \"float\": \"right\", \"marginTop\": \"1%\" }} onClick={setModalState}>Close</button>\r\n                <h1 >Register a NFT:</h1>\r\n                <form id=\"newOrder\" onSubmit={onSubmit}>\r\n                    <label>Collectible Token URI: </label>\r\n                    <input type=\"string\" required\r\n                        value={tokenURI} onChange={(e) => setTokenURI(e.target.value)} />\r\n                    <label>Collectible Description: </label>\r\n                    <input type=\"string\" required\r\n                        value={description} onChange={(e) => setDescription(e.target.value)} />\r\n                    <label>Collectible Price (berkcoins): </label>\r\n                    <input type=\"number\" required\r\n                        value={price} onChange={(e) => setPrice(e.target.value)} />\r\n\r\n\r\n                    <input style={{ float: \"right\", margin: \"0\", padding: \"0\", marginTop: \"2%\" }} type=\"checkbox\"\r\n                        value={availability} onChange={(e) => setAvailability(!availability)} />\r\n                    <label style={{ display: \"inline\" }}>Set available: </label>\r\n                    <h3 style={{ marginLeft: \"10%\" }}>Collectible will {!availability && \"not\"} be listed as available for trade.</h3>\r\n                    {price !== 0 && <h3 style={{ color: \"red\", textAlign: \"center\" }}>You will pay {price / fee} berkcoins registration fee.</h3>}\r\n                    <button style={{ display: \"flex\", margin: \"auto\", marginTop: \"5%\" }}>Register</button>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterModal","import { useState, useEffect } from \"react\";\r\nimport React from 'react';\r\nimport { BallTriangle } from 'react-loader-spinner'\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Collectible from \"./Collectible\";\r\nimport RegisterModal from \"./RegisterModal\";\r\n\r\n\r\nconst Market = ({ account, contract }) => {\r\n    const [modalState, setModalState] = useState(false);\r\n    const [collectibles, setCollectibles] = useState(undefined);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [sort, setSort] = useState(\"Sort By Price\");\r\n    const [fee, setFee] = useState(0);\r\n\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        getAllNFTs();\r\n        navigate(\"/berkcoin/market\");\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        navigate(\"/berkcoin/market\");\r\n    }, [sort]);\r\n\r\n\r\n    const getAllNFTs = async () => {\r\n        const fee = await contract.methods.getCollectibleFee()\r\n            .call({ from: account });\r\n        setFee(fee);\r\n        const collectibles = [];\r\n        const tokenCount = await contract.methods.getTokenCount()\r\n            .call({ from: account });\r\n        for (var i = 1; i <= tokenCount; i++) {\r\n            const tokenURI = await contract.methods.getTokenURI(i)\r\n                .call({ from: account });\r\n            const tokenOwner = await contract.methods.getTokenOwner(i)\r\n                .call({ from: account });\r\n            if (tokenOwner === \"0x0000000000000000000000000000000000000000\") {\r\n                continue;\r\n            }\r\n            const tokenCreator = await contract.methods.getTokenCreator(i)\r\n                .call({ from: account });\r\n            const tokenDescription = await contract.methods.getTokenDescription(i)\r\n                .call({ from: account });\r\n            const priceOfCollectible = await contract.methods.getPriceOfCollectible(i)\r\n                .call({ from: account });\r\n            const collectibleHash = await contract.methods.getTokenHash(i)\r\n                .call({ from: account });\r\n            const availability = await contract.methods.getAvailabilityOfToken(i)\r\n                .call({ from: account });\r\n\r\n            // Price level:\r\n            var priceLevel = \"green\";\r\n            if (priceOfCollectible >= 200000) {\r\n                priceLevel = \"darkviolet\";\r\n            }\r\n            else if (priceOfCollectible >= 100000) {\r\n                priceLevel = \"#FF7102\";\r\n            }\r\n            else if (priceOfCollectible >= 50000) {\r\n                priceLevel = \"red\";\r\n            }\r\n            else if (priceOfCollectible >= 10000) {\r\n                priceLevel = \"blue\";\r\n            }\r\n\r\n            const Collectible = {\r\n                \"tokenID\": i,\r\n                \"tokenURI\": tokenURI,\r\n                \"tokenCreator\": tokenCreator,\r\n                \"tokenOwner\": tokenOwner,\r\n                \"tokenDescription\": tokenDescription,\r\n                \"priceOfCollectible\": priceOfCollectible,\r\n                \"collectibleHash\": collectibleHash,\r\n                \"priceLevel\": priceLevel,\r\n                \"availability\": availability\r\n            }\r\n            collectibles.push(Collectible);\r\n        }\r\n        setCollectibles(collectibles);\r\n    }\r\n\r\n    const registerNFT = () => {\r\n        setModalState(true);\r\n    }\r\n\r\n    const onRegister = async (tokenURI, description, price, availability) => {\r\n        console.log(availability)\r\n        await contract.methods.registerNewCollectible(tokenURI, description, price, availability)\r\n            .send({ from: account });\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const onBuy = async (tokenID) => {\r\n        await contract.methods.buyCollectible(tokenID)\r\n            .send({ from: account });\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const onSetPrice = async (tokenID, newPrice, availability) => {\r\n        const oldPrice = collectibles.find(({ tokenID }) => tokenID === tokenID).priceOfCollectible;\r\n        if (oldPrice !== newPrice) {\r\n            await contract.methods.setPriceOfCollectible(tokenID, newPrice)\r\n                .send({ from: account });\r\n        }\r\n\r\n        const currentAvailabilityStatus = await contract.methods.getAvailabilityOfToken(tokenID)\r\n            .call({ from: account });\r\n        if (availability !== currentAvailabilityStatus) {\r\n            await contract.methods.setAvailabilityOfCollectible(tokenID, availability)\r\n                .send({ from: account });\r\n        }\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const onSort = () => {\r\n        if (sort === \"Sort By Price\") {\r\n            const sortedArr = collectibles.sort(function (a, b) {\r\n                return b.priceOfCollectible - a.priceOfCollectible;\r\n            });\r\n            setCollectibles(sortedArr);\r\n            setSort(\"Sort By Default\");\r\n        }\r\n        else {\r\n            setSort(\"Sort By Price\");\r\n            getAllNFTs();\r\n        }\r\n    }\r\n\r\n    const onBurn = async (tokenID) => {\r\n        await contract.methods.burnCollectible(tokenID)\r\n            .send({ from: account });\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Berkcoin NFT Marketplace</h1>\r\n            <button onClick={registerNFT}>Register a NFT</button>\r\n            <button style={{ float: \"right\" }} onClick={onSort}>{sort}</button>\r\n            {modalState === true && <RegisterModal\r\n                modalState={modalState}\r\n                setModalState={() => setModalState(!modalState)}\r\n                onRegister={onRegister}\r\n                fee={fee} />\r\n            }\r\n            <ul style={{ listStyleType: \"none\" }}>\r\n                {collectibles !== undefined && collectibles.slice(0).map((collectible) => (\r\n                    <Collectible\r\n                        account={account}\r\n                        collectible={collectible}\r\n                        onBuy={onBuy}\r\n                        onSetPrice={onSetPrice}\r\n                        onBurn={onBurn}\r\n                        fee={fee}\r\n                    />\r\n                ))}\r\n                {collectibles === undefined &&\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                        <BallTriangle color=\"#00BFFF\" height={200} width={200} />\r\n                    </div>\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Market","import React, { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { useState } from \"react\"\r\nconst Trade = ({ account, contract, balance, ethBalance, getBalance }) => {\r\n    const [depositAmount, setDepositAmount] = useState(0);\r\n    const [depositPrice, setDepositPrice] = useState(0);\r\n\r\n    const [withdrawAmount, setWithdrawAmount] = useState(0);\r\n    const [withdrawPrice, setWithdrawPrice] = useState(0);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const fetchCurrentTokenPrice = async () => {\r\n            const response = await contract.methods.getTokenPrice()\r\n                .call({ from: account });\r\n            setDepositPrice(response / 10 ** 18);\r\n            setWithdrawPrice(response / 10 ** 18);\r\n        }\r\n\r\n        fetchCurrentTokenPrice();\r\n    }, []);\r\n\r\n    const deposit = async () => {\r\n        await contract.methods.deposit(depositAmount)\r\n            .send({ from: account, value: (depositAmount * depositPrice * 10 ** 14).toString(10) + \"0000\" });\r\n        getBalance();\r\n    };\r\n\r\n    const withdraw = async () => {\r\n        await contract.methods.withdraw(withdrawAmount)\r\n            .send({ from: account });\r\n        getBalance();\r\n    };\r\n\r\n    const onBuy = (e) => {\r\n        e.preventDefault();\r\n        deposit();\r\n        navigate('/wallet');\r\n    }\r\n\r\n    const onSell = (e) => {\r\n        e.preventDefault();\r\n        withdraw();\r\n        navigate('/wallet');\r\n    }\r\n\r\n    return (\r\n        <div id=\"trade\">\r\n            <div id=\"trade-child\">\r\n                <h2>Buy berkcoin</h2>\r\n                <p style={{ marginLeft: \"25%\" }}>ETH Balance: {ethBalance}</p>\r\n                <form id=\"newOrder\" onSubmit={onBuy}>\r\n                    <label>Amount: </label>\r\n                    <input type=\"number\" required\r\n                        value={depositAmount} onChange={(e) => setDepositAmount(e.target.value)} />\r\n                    <label>Current Price: </label>\r\n                    <input type=\"number\" required\r\n                        value={depositPrice} onChange={(e) => setDepositPrice(e.target.value)} />\r\n                    {depositAmount !== 0 && <h3 style={{ color: \"green\", textAlign: \"center\" }}>You will pay {depositAmount * depositPrice} ETH</h3>}\r\n                    <button style={{ display: \"inline-block\", marginLeft: \"39%\" }}>Buy berkcoin</button>\r\n                </form>\r\n            </div>\r\n            <div id=\"trade-child\">\r\n                <h2>Sell berkcoin</h2>\r\n                <p style={{ marginLeft: \"25%\" }}>Berkcoin balance: {balance}</p>\r\n                <form id=\"newOrder\" onSubmit={onSell}>\r\n                    <label>Amount: </label>\r\n                    <input type=\"number\" required\r\n                        value={withdrawAmount} onChange={(e) => setWithdrawAmount(e.target.value)} />\r\n                    <label>Current Price: </label>\r\n                    <input type=\"number\" required\r\n                        value={withdrawPrice} onChange={(e) => setWithdrawPrice(e.target.value)} />\r\n                    {withdrawAmount !== 0 && <h3 style={{ color: \"green\", textAlign: \"center\" }}>You will get {withdrawAmount * withdrawPrice} ETH</h3>}\r\n                    <button style={{ display: \"inline-block\", marginLeft: \"39%\" }}>Sell berkcoin</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Trade","import { useState, useEffect } from \"react\";\r\nimport React from 'react';\r\n\r\nconst Staking = ({ account, contract, balance }) => {\r\n    // inputs\r\n    const [depositAmount, setDepositAmount] = useState(0);\r\n    const [stakeDuration, setStakeDuration] = useState(0);\r\n    const [refresh, setRefresh] = useState(false);\r\n\r\n    // views\r\n    const [stakedDuration, setStakedDuration] = useState(\"\");\r\n    const [stakedBalance, setStakedBalance] = useState(0);\r\n    const [stakeReward, setStakeReward] = useState(0);\r\n    const [calculatedStakeReward, setCalculatedStakeReward] = useState(0);\r\n    const [interestRate, setInterestRate] = useState(0);\r\n    const [availableStake, setAvailableStake] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        if (contract !== undefined) {\r\n            getStakedAmount();\r\n            getCurrentStakeReward();\r\n            getStakeCompletionDate();\r\n            getInterest();\r\n            getContractBalance();\r\n        }\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        calculateStakeReward();\r\n    }, [depositAmount, stakeDuration])\r\n\r\n    const onStake = async (e) => {\r\n        e.preventDefault();\r\n        await contract.methods.stake(stakeDuration * 60 * 60, depositAmount)\r\n            .send({ from: account });\r\n\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const getStakedAmount = async () => {\r\n        const response = await contract.methods.getStakeAmount(account)\r\n            .call({ from: account });\r\n        setStakedBalance(response);\r\n    };\r\n\r\n    const getCurrentStakeReward = async () => {\r\n        const response = await contract.methods.getCurrentStakeReward(account)\r\n            .call({ from: account });\r\n        setStakeReward(response);\r\n    };\r\n\r\n    const getStakeCompletionDate = async () => {\r\n        const response = await contract.methods.getStakeCompletionDate(account)\r\n            .call({ from: account });\r\n\r\n        if (response == 0) {\r\n            setStakedDuration(\"NaN\");\r\n            return;\r\n        }\r\n\r\n        const date = new Date(response * 1000).toLocaleDateString(\"en-US\");\r\n        const time = new Date(response * 1000).toLocaleTimeString(\"en-US\")\r\n        setStakedDuration(date + \" \" + time);\r\n    };\r\n\r\n    const getInterest = async () => {\r\n        const response = await contract.methods.getInterest()\r\n            .call({ from: account });\r\n        setInterestRate(response);\r\n    }\r\n\r\n    const getContractBalance = async () => {\r\n        const response = await contract.methods.getContractBalance()\r\n            .call({ from: account });\r\n        setAvailableStake(response / 10 ** 18);\r\n    }\r\n\r\n    const calculateStakeReward = () => {\r\n        let stakeRate = interestRate;\r\n        stakeRate = stakeRate * stakeDuration * 60 * 60;\r\n\r\n        // More than 100 ETH:\r\n        if (depositAmount > 100) {\r\n            stakeRate = stakeRate * 2;\r\n        }\r\n        setCalculatedStakeReward(stakeRate / 10000);\r\n    }\r\n\r\n    const checkStakeStatus = async () => {\r\n        const currentTimeStamp = Math.round((new Date()).getTime() / 1000);\r\n        try {\r\n            if (stakedBalance === 0) {\r\n                throw \"Stake balance is 0!\";\r\n            }\r\n            await contract.methods.checkStakeStatus(account, currentTimeStamp)\r\n                .send({ from: account });\r\n\r\n            setRefresh(!refresh);\r\n        }\r\n        catch (error) {\r\n            alert(\"Error on withdraw!\");\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    if (contract === undefined) {\r\n        return (\r\n            <div>Mounting the smart contract, please wait.</div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>Wallet Public Address: {account} <span style={{ float: \"right\" }}> Total Circulation Value: {availableStake} ETH</span></h3>\r\n            <h3>Balance: {balance}</h3>\r\n            <h3>Staked amount: {stakedBalance}</h3>\r\n            <h3>Earnings from staking : {stakeReward}</h3>\r\n            <h3>Staking will end : {stakedDuration}</h3>\r\n            <button onClick={checkStakeStatus} style={{ display: \"inline-block\" }}>Withdraw stake</button>\r\n\r\n            <div id=\"trade\">\r\n                <h2>Stake berkcoin</h2>\r\n                <form id=\"newOrder\" onSubmit={onStake}>\r\n                    <label>Stake Amount: </label>\r\n                    <input type=\"number\" required\r\n                        value={depositAmount} onChange={(e) => setDepositAmount(e.target.value)} />\r\n                    <label>Duration (hours): </label>\r\n                    <input type=\"number\" required\r\n                        value={stakeDuration} onChange={(e) => setStakeDuration(e.target.value)} />\r\n                    <h3 style={{ color: \"green\", textAlign: \"center\" }}>You will earn {calculatedStakeReward} berkcoins after stake completion.</h3>\r\n                    <button style={{ display: \"inline-block\", marginLeft: \"36%\" }}>Stake berkcoin</button>\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Staking","import React from 'react'\r\nexport const Header = ({ account, connect }) => {\r\n    return (\r\n        <div className='header'>\r\n            <span to=\"/\">Wallet Connection Status: {\r\n                account === undefined ?\r\n                    <span onClick={connect} style={{ color: \"red\" }}>Not Connected</span> :\r\n                    <span style={{ color: \"green\" }}>Connected</span>\r\n            }\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, useNavigate, Navigate } from \"react-router-dom\"\nimport { useState, useEffect } from \"react\"\n\nimport getWeb3 from \"./services/getWeb3\";\n\nimport BerkToken from \"./contracts/BerkToken\";\n\n\nimport Nav from \"./components/PageComponents/Nav\";\nimport Wallet from \"./components/TokenComponents/Wallet\";\nimport Market from \"./components/CollectibleComponents/Market\";\nimport Trade from \"./components/TokenComponents/Trade\";\nimport Staking from \"./components/TokenComponents/Staking\";\nimport { Header } from './components/PageComponents/Header';\n\nfunction App() {\n  // Rewriting truffle generated code for react hooks:\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [contract, setContract] = useState(undefined);\n  const [balance, setBalance] = useState(0);\n  const [ethBalance, setEthBalance] = useState(0);\n\n  useEffect(() => {\n    componentDidMount();\n  }, [])\n\n  useEffect(() => {\n    if (web3 !== undefined && accounts !== undefined && contract !== undefined) {\n      getBalance();\n    }\n  }, [web3, accounts, contract])\n\n  const componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BerkToken.networks[networkId];\n      const instance = new web3.eth.Contract(\n        BerkToken.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      setWeb3(web3);\n      setAccounts(accounts);\n      setContract(instance);\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  const getBalance = async () => {\n    const response = await contract.methods.getBalance(accounts[0])\n      .call({ from: accounts[0] });\n    setBalance(response);\n    const ethBalance = await web3.eth.getBalance(accounts[0]);\n    setEthBalance(web3.utils.fromWei(ethBalance, 'ether'));\n  };\n\n\n  if (web3 === undefined || accounts === undefined || contract === undefined) {\n    return (\n      <Router>\n        <Header\n          account={undefined}\n          connect={() => window.location.reload()} />\n        <Nav />\n      </Router>\n    );\n  }\n\n  return (\n    <Router>\n      <Header\n        account={accounts[0]}\n      />\n      <Nav />\n      <Routes>\n        <Route path='/berkcoin/' element={<Navigate to={\"/berkcoin/wallet\"} />} />\n\n        <Route path='/berkcoin/wallet' element={<Wallet\n          web3={web3}\n          account={accounts[0]}\n          balance={balance} />} />\n\n        <Route path='/berkcoin/market' element={<Market\n          account={accounts[0]}\n          contract={contract} />} />\n\n        <Route path='/berkcoin/trade' element={<Trade\n          account={accounts[0]}\n          contract={contract}\n          balance={balance}\n          ethBalance={ethBalance}\n          getBalance={getBalance} />} />\n\n        <Route path='/berkcoin/staking' element={<Staking\n          account={accounts[0]}\n          contract={contract}\n          balance={balance} />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './services/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}