{"version":3,"sources":["services/getWeb3.js","components/PageComponents/Nav.js","components/PageComponents/LoadingTriangle.js","services/ContractHelper.js","components/TokenComponents/Wallet.js","components/CollectibleComponents/CollectibleModal.js","components/CollectibleComponents/Collectible.js","components/CollectibleComponents/RegisterModal.js","components/CollectibleComponents/Market.js","components/TokenComponents/Trade.js","components/TokenComponents/Staking.js","components/SocialComponents/PostModal.js","components/SocialComponents/Social.js","components/PageComponents/Header.js","App.js","services/serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","async","ethereum","web3","Web3","enable","error","console","log","provider","providers","HttpProvider","Nav","className","to","LoadingTriangle","style","display","justifyContent","margin","color","height","width","getCollectible","contract","account","collectibleIndex","tokenURI","methods","getTokenURI","call","from","tokenOwner","getTokenOwner","tokenCreator","getTokenCreator","tokenDescription","getTokenDescription","priceOfCollectible","getPriceOfCollectible","priceLevel","getTokenHash","getAvailabilityOfToken","Wallet","balance","useState","transactions","setTransactions","undefined","userCollectible","setUserCollectible","useEffect","retrievedCollectible","tokenCount","getTokenCount","i","getAccessibility","findUserCollectible","retrieveUserCollectible","retrievedTransactions","abiDecoder","addABI","BerkToken","abi","pastLogs","eth","getPastLogs","fromBlock","address","filteredTransactions","Set","forEach","transaction","getTransaction","transactionHash","decodedLog","decodeMethod","input","has","hash","add","value","name","params","push","getTransactions","retrieveTransactions","alt","src","backgroundColor","borderRadius","float","cursor","length","slice","map","key","href","target","rel","Modal","setAppElement","CollectibleModal","collectible","collectibleModalState","setCollectibleModalState","onBuyRequest","onUpdatePrice","onBurnRequest","fee","isOwner","setOwner","price","setPrice","priceChange","setPriceChange","availability","setAvailability","modalState","setModalState","collectibleTextStyle","textAlign","fontWeight","onClick","e","stopPropagation","isOpen","shouldCloseOnEsc","onRequestClose","centered","overlay","opacity","content","collectibleHash","marginTop","id","onSubmit","preventDefault","type","required","onChange","padding","Collectible","onBuy","onSetPrice","onBurn","changeModalState","tokenID","newPrice","RegisterModal","onRegister","setTokenURI","description","setDescription","shouldCloseOnOverlayClick","marginLeft","Market","refresher","collectibles","setCollectibles","refresh","setRefresh","sort","setSort","setFee","navigate","useNavigate","getAllNFTs","getCollectibleFee","retrievedCollectibles","getCollectibles","buyCollectible","send","find","setPriceOfCollectible","setAvailabilityOfCollectible","burnCollectible","sortedArr","a","b","registerNewCollectible","listStyleType","Trade","ethBalance","getBalance","depositAmount","setDepositAmount","depositPrice","setDepositPrice","userPrice","setUserPrice","withdrawAmount","setWithdrawAmount","withdrawPrice","setWithdrawPrice","transferAmount","setTransferAmount","transferAddress","setTransferAddress","response","getTokenPrice","fetchCurrentTokenPrice","normalizedUserPrice","BigNumber","multipliedBy","toFixed","finalPrice","deposit","withdraw","defaultValue","transfer","Staking","stakeDuration","setStakeDuration","stakedDuration","setStakedDuration","stakedBalance","setStakedBalance","stakeReward","setStakeReward","calculatedStakeReward","setCalculatedStakeReward","interestRate","setInterestRate","availableStake","setAvailableStake","getStakedAmount","getCurrentStakeReward","getStakeCompletionDate","getInterest","getContractBalance","calculateStakeReward","getStakeAmount","date","Date","toLocaleDateString","time","toLocaleTimeString","stakeRate","currentTimeStamp","Math","round","getTime","Error","checkStakeStatus","alert","stake","Social","setPosts","getAllPosts","posts","postCount","getPostCount","post","getPostAuthor","getPostTitle","getPostText","getPostDate","getPostUpvotes","getPosts","Header","connect","App","setWeb3","accounts","setAccounts","setContract","setBalance","setEthBalance","componentDidMount","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","utils","fromWei","basename","location","reload","path","element","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.774ea150.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n\n        //App.web3Provider = web3.currentProvider;\n        //web3 = new Web3(web3.currentProvider);\n\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import { Link } from 'react-router-dom'\r\nimport React from 'react';\r\nconst Nav = () => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <ul className=\"nav\">\r\n                    <li className=\"nav\"><Link to=\"/wallet\">Wallet</Link></li>\r\n                    <li className=\"nav\"><Link to=\"/market\">Market</Link></li>\r\n                    <li className=\"nav\"><Link to=\"/trade\">Trade</Link></li>\r\n                    <li className=\"nav\"><Link to=\"/staking\">Staking</Link></li>\r\n                    <li className=\"nav\"><Link to=\"/social\">Social</Link></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav","import React from 'react';\r\nimport { BallTriangle } from 'react-loader-spinner';\r\n\r\nconst LoadingTriangle = () => {\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\", margin: \"10%\" }}>\r\n            <BallTriangle color=\"#00BFFF\" height={200} width={200} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingTriangle","import abiDecoder from 'abi-decoder';\r\nimport BerkToken from \"../contracts/BerkToken\";\r\n\r\nexport const getCollectibles = async (account, contract) => {\r\n    const collectibles = [];\r\n\r\n    const tokenCount = await contract.methods.getTokenCount()\r\n        .call({ from: account });\r\n\r\n    for (var i = 1; i <= tokenCount; i++) {\r\n        const accessibility = await contract.methods.getAccessibility(i)\r\n            .call({ from: account });\r\n        if (accessibility === false) {\r\n            continue;\r\n        }\r\n\r\n        const collectible = await getCollectible(contract, account, i);\r\n        collectibles.push(collectible);\r\n    }\r\n    return collectibles;\r\n};\r\n\r\nexport const findUserCollectible = async (account, contract) => {\r\n    const tokenCount = await contract.methods.getTokenCount()\r\n        .call({ from: account });\r\n\r\n    for (var i = 1; i <= tokenCount; i++) {\r\n        const accessibility = await contract.methods.getAccessibility(i)\r\n            .call({ from: account });\r\n        if (accessibility === false) {\r\n            continue;\r\n        }\r\n\r\n        const tokenOwner = await contract.methods.getTokenOwner(i)\r\n            .call({ from: account });\r\n        if (tokenOwner === account) {\r\n            return await getCollectible(contract, account, i);\r\n        }\r\n    }\r\n    return await getCollectible(contract, account, 1);\r\n}\r\n\r\nexport const getCollectible = async (contract, account, collectibleIndex) => {\r\n    const tokenURI = await contract.methods.getTokenURI(collectibleIndex)\r\n        .call({ from: account });\r\n    const tokenOwner = await contract.methods.getTokenOwner(collectibleIndex)\r\n        .call({ from: account });\r\n    const tokenCreator = await contract.methods.getTokenCreator(collectibleIndex)\r\n        .call({ from: account });\r\n    const tokenDescription = await contract.methods.getTokenDescription(collectibleIndex)\r\n        .call({ from: account });\r\n    const priceOfCollectible = await contract.methods.getPriceOfCollectible(collectibleIndex)\r\n        .call({ from: account });\r\n    const collectibleHash = await contract.methods.getTokenHash(collectibleIndex)\r\n        .call({ from: account });\r\n    const availability = await contract.methods.getAvailabilityOfToken(collectibleIndex)\r\n        .call({ from: account });\r\n\r\n    // Price level:\r\n    var priceLevel = \"green\";\r\n    if (priceOfCollectible >= 200000) {\r\n        priceLevel = \"darkviolet\";\r\n    }\r\n    else if (priceOfCollectible >= 100000) {\r\n        priceLevel = \"#ff5202\";\r\n    }\r\n    else if (priceOfCollectible >= 50000) {\r\n        priceLevel = \"red\";\r\n    }\r\n    else if (priceOfCollectible >= 10000) {\r\n        priceLevel = \"blue\";\r\n    }\r\n\r\n    return {\r\n        \"tokenID\": collectibleIndex,\r\n        \"tokenURI\": tokenURI,\r\n        \"tokenCreator\": tokenCreator,\r\n        \"tokenOwner\": tokenOwner,\r\n        \"tokenDescription\": tokenDescription,\r\n        \"priceOfCollectible\": priceOfCollectible,\r\n        \"collectibleHash\": collectibleHash,\r\n        \"priceLevel\": priceLevel,\r\n        \"availability\": availability\r\n    }\r\n};\r\n\r\nexport const getTransactions = async (account, contract, web3) => {\r\n    const contractAddress = \"0x8Bc1df7C214a04B61264882469490650C3A229C3\";\r\n\r\n    abiDecoder.addABI(BerkToken.abi);\r\n    const transactions = [];\r\n    // We can easily fetch indexed transactions:\r\n    const pastLogs = await web3.eth.getPastLogs(\r\n        { fromBlock: '0x0', address: contractAddress });\r\n    // Decoding transactions inputs:\r\n    const filteredTransactions = new Set();\r\n    pastLogs.forEach(async (log) => {\r\n        const transaction = await web3.eth.getTransaction(log.transactionHash);\r\n        if (transaction.from === account) {\r\n            const decodedLog = abiDecoder.decodeMethod(transaction.input);\r\n            if (decodedLog !== undefined) {\r\n                if (filteredTransactions.has(transaction.hash) === false) {\r\n                    filteredTransactions.add(transaction.hash);\r\n                    var value = 0;\r\n                    if (decodedLog.name === \"send\"\r\n                        || decodedLog.name === \"stake\") {\r\n                        const params = decodedLog.params;\r\n                        value = params[1].value;\r\n                    }\r\n                    transactions.push({\r\n                        \"hash\": transaction.hash,\r\n                        \"log\": decodedLog,\r\n                        \"value\": value\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    })\r\n    return transactions;\r\n};\r\n\r\nexport const getPosts = async (account, contract) => {\r\n    const posts = [];\r\n\r\n    const postCount = await contract.methods.getPostCount()\r\n        .call({ from: account });\r\n\r\n    for (var i = 0; i <= postCount; i++) {\r\n        const postAuthor = await contract.methods.getPostAuthor(i)\r\n            .call({ from: account });\r\n        const postTitle = await contract.methods.getPostTitle(i)\r\n            .call({ from: account });\r\n        const postText = await contract.methods.getPostText(i)\r\n            .call({ from: account });\r\n        const postDate = await contract.methods.getPostDate(i)\r\n            .call({ from: account });\r\n        const postUpvotes = await contract.methods.getPostUpvotes(i)\r\n            .call({ from: account });\r\n\r\n        const post = {\r\n            \"id\": i,\r\n            \"author\": postAuthor,\r\n            \"title\": postTitle,\r\n            \"text\": postText,\r\n            \"date\": postDate,\r\n            \"upvotes\": postUpvotes\r\n        };\r\n        posts.push(post);\r\n    }\r\n    return posts;\r\n};","import React, { useEffect, useState } from 'react';\r\nimport LoadingTriangle from '../PageComponents/LoadingTriangle';\r\nimport { findUserCollectible, getTransactions } from '../../services/ContractHelper';\r\n\r\nconst Wallet = ({ web3, contract, account, balance }) => {\r\n    // API URI can be changed based on the network where token was deployed.\r\n    const apiURI = \"http://ropsten.etherscan.io/tx/\";\r\n\r\n    const [transactions, setTransactions] = useState([]);\r\n    const [userCollectible, setUserCollectible] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        const retrieveUserCollectible = async () => {\r\n            const retrievedCollectible = await findUserCollectible(account, contract);\r\n            setUserCollectible(retrievedCollectible);\r\n        }\r\n\r\n        const retrieveTransactions = async () => {\r\n            const retrievedTransactions = await getTransactions(account, contract, web3);\r\n            setTransactions(retrievedTransactions);\r\n        }\r\n\r\n        retrieveUserCollectible();\r\n        retrieveTransactions();\r\n\r\n    }, [account, contract, web3])\r\n\r\n    const userProfileCollectibleStyle = {\r\n        display: \"flex\",\r\n        backgroundColor: \"#00BFFF\",\r\n        width: \"150px\",\r\n        height: \"150px\",\r\n        borderRadius: \"4%\",\r\n        float: \"left\",\r\n        cursor: \"pointer\",\r\n        margin: \"1%\"\r\n    }\r\n\r\n    const userInfoStyle = {\r\n        float: \"left\",\r\n        margin: \"1%\"\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ display: \"flex\" }}>\r\n                <div>\r\n                    {userCollectible !== undefined ?\r\n                        (\r\n                            <img alt=\"pfp\" src={userCollectible.tokenURI} style={userProfileCollectibleStyle} >\r\n                            </img>\r\n                        )\r\n                        :\r\n                        (\r\n                            <LoadingTriangle />\r\n                        )\r\n                    }\r\n                </div>\r\n                <div style={userInfoStyle}>\r\n                    <h3>Welcome back! {account}\r\n                    </h3>\r\n                    <h3>Your Balance: {balance} {balance !== 0 && \"berkcoins\"}</h3>\r\n                    <h3>Your Latest Transactions:</h3>\r\n                </div>\r\n            </div>\r\n\r\n            {!(transactions.length === 0 || userCollectible === undefined) ?\r\n                (\r\n                    <table className=\"transactionList\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th >Transaction Hash</th>\r\n                                <th >Transaction Method</th>\r\n                                <th >Berkcoin Value</th>\r\n                            </tr>\r\n                            {transactions.slice(0).map((transaction) => (\r\n                                <tr key={transaction.hash}>\r\n                                    <td >\r\n                                        <a style={{ color: \"#0948cf\" }}\r\n                                            href={apiURI + transaction.hash}\r\n                                            target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                            {transaction.hash}\r\n                                            <span>&#x2197;</span>\r\n                                        </a>\r\n                                    </td>\r\n                                    <td>{transaction.log.name}</td>\r\n                                    <td>{transaction.value}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                )\r\n                :\r\n                (\r\n                    <LoadingTriangle />\r\n                )\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Wallet","import React, { useState, useEffect } from 'react'\r\nimport Modal from \"react-modal\";\r\nModal.setAppElement('#root');\r\n\r\nexport const CollectibleModal = ({ account, collectible, collectibleModalState,\r\n    setCollectibleModalState, onBuyRequest, onUpdatePrice,\r\n    onBurnRequest, fee }) => {\r\n    const [isOwner, setOwner] = useState(false);\r\n    const [price, setPrice] = useState(collectible.priceOfCollectible);\r\n    const [priceChange, setPriceChange] = useState(false);\r\n    const [availability, setAvailability] = useState(false);\r\n    const [modalState, setModalState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (collectible.tokenOwner === account) {\r\n            setOwner(true);\r\n        }\r\n    }, [account, collectible.tokenOwner]);\r\n\r\n    useEffect(() => {\r\n        if (collectible.priceOfCollectible !== price) {\r\n            setPriceChange(true);\r\n        }\r\n        else {\r\n            setPriceChange(false);\r\n        }\r\n    }, [collectible.priceOfCollectible, price])\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onUpdatePrice(price, availability);\r\n        setModalState(!modalState);\r\n    }\r\n\r\n    const collectibleTextStyle = {\r\n        color: \"black\",\r\n        textAlign: \"center\",\r\n        fontWeight: \"bold\"\r\n    }\r\n\r\n    const collectibleImageStyle = {\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        borderRadius: \"10%\",\r\n        display: \"flex\",\r\n        margin: \"0 auto\"\r\n    }\r\n\r\n    return (\r\n        <div onClick={(e) => e.stopPropagation()}>\r\n            <Modal isOpen={collectibleModalState}\r\n                shouldCloseOnEsc={true}\r\n                onRequestClose={setCollectibleModalState}\r\n                centered\r\n                style={\r\n                    {\r\n                        overlay: {\r\n                            opacity: \"1\"\r\n                        },\r\n                        content: {\r\n                            borderRadius: \"4%\",\r\n                            backgroundColor: \"#00BFFF\",\r\n                            width: \"33%\",\r\n                            height: \"60%\",\r\n                            margin: \"auto\"\r\n                        },\r\n                    }\r\n                }>\r\n                <div>\r\n                    <div style={{\r\n                        backgroundColor: collectible.priceLevel, borderRadius: \"4%\",\r\n                        width: \"40%\", display: \"flex\", margin: \"0 auto\"\r\n                    }}>\r\n                        <img style={collectibleImageStyle} alt={collectible.tokenDescription} src={collectible.tokenURI} />\r\n                    </div>\r\n                    <p style={{ color: collectible.priceLevel, textAlign: \"center\", fontWeight: \"bold\" }}>\r\n                        {collectible.tokenDescription}\r\n                    </p>\r\n                    <p style={{ color: collectible.priceLevel, textAlign: \"center\", fontWeight: \"bold\" }}>\r\n                        {collectible.priceOfCollectible} berkcoins\r\n                    </p>\r\n                    <p style={collectibleTextStyle}>\r\n                        Created By: {collectible.tokenCreator}\r\n                    </p>\r\n                    <p style={collectibleTextStyle}>\r\n                        Owner: {collectible.tokenOwner} {isOwner && <span>(you)</span>}\r\n                    </p>\r\n                    <p style={collectibleTextStyle}>\r\n                        Collectible Hash: {collectible.collectibleHash}\r\n                    </p>\r\n                    {isOwner &&\r\n                        <button style={{ float: \"left\", marginTop: \"6%\" }} onClick={() => setModalState(!modalState)}>\r\n                            Update Collectible\r\n                        </button>\r\n                    }\r\n                    {!isOwner && collectible.availability === true &&\r\n                        <button style={{ float: \"left\", marginTop: \"6%\" }} onClick={onBuyRequest}>\r\n                            Buy Collectible\r\n                        </button>\r\n                    }\r\n                    <button style={{ float: \"right\", marginTop: \"6%\" }} onClick={setCollectibleModalState}>\r\n                        Close\r\n                    </button>\r\n                </div>\r\n\r\n                <Modal isOpen={modalState}\r\n                    shouldCloseOnEsc={true}\r\n                    onRequestClose={() => setModalState(!modalState)}\r\n                    centered\r\n                    style={\r\n                        {\r\n                            overlay: {\r\n                                opacity: \"1\"\r\n                            },\r\n                            content: {\r\n                                borderRadius: \"4%\",\r\n                                backgroundColor: \"#92A8D1\",\r\n                                width: \"28%\",\r\n                                height: \"38%\",\r\n                                margin: \"auto\"\r\n                            },\r\n                        }\r\n                    }>\r\n\r\n                    <div >\r\n                        <button style={{ float: \"right\" }} onClick={() => setModalState(!modalState)}>Close</button>\r\n                        <h2>Update Collectible:</h2>\r\n                        <form id=\"newOrder\" onSubmit={onSubmit}>\r\n                            <label>\r\n                                Enter a new price (berkcoins):\r\n                            </label>\r\n                            <input type=\"number\" required\r\n                                value={price} onChange={(e) => setPrice(e.target.value)} />\r\n                            <input style={{ float: \"right\", margin: \"0\", padding: \"0\", marginTop: \"2%\" }} type=\"checkbox\"\r\n                                value={availability} onChange={(e) => setAvailability(!availability)} />\r\n                            <label style={{ display: \"inline\" }}>Set available: </label>\r\n                            <h3 style={{ textAlign: \"center\" }}>\r\n                                Collectible will {!availability && \"not\"} be listed as available for trade.\r\n                            </h3>\r\n                            {priceChange === true &&\r\n                                <h3 style={{ color: \"red\", textAlign: \"center\" }}>\r\n                                    You will pay {fee} berkcoins price update fee.\r\n                                </h3>\r\n                            }\r\n                            <button style={{ float: \"right\", display: \"flex\", margin: \"auto\" }}>\r\n                                Update\r\n                            </button>\r\n                        </form>\r\n                        <button style={{ float: \"left\", color: \"red\" }} onClick={onBurnRequest}>\r\n                            Burn Collectible\r\n                        </button>\r\n                    </div>\r\n                </Modal>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { CollectibleModal } from './CollectibleModal';\r\n\r\nconst Collectible = ({ account, collectible, onBuy, onSetPrice, onBurn, fee }) => {\r\n    const [collectibleModalState, setCollectibleModalState] = useState(false);\r\n\r\n    const changeModalState = () => {\r\n        setCollectibleModalState(!collectibleModalState);\r\n    }\r\n\r\n    const onBuyRequest = () => {\r\n        onBuy(collectible.tokenID);\r\n    }\r\n\r\n    const onUpdatePrice = (newPrice, availability) => {\r\n        onSetPrice(collectible.tokenID, newPrice, availability);\r\n    }\r\n\r\n    const onBurnRequest = () => {\r\n        onBurn(collectible.tokenID);\r\n        changeModalState();\r\n    }\r\n\r\n    const collectibleStyle = {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        margin: \"3%\",\r\n        backgroundColor: \"#92A8D1\",\r\n        width: \"300px\",\r\n        height: \"390px\",\r\n        borderRadius: \"4%\",\r\n        float: \"left\",\r\n        cursor: \"pointer\"\r\n    }\r\n\r\n    return (\r\n\r\n        <div onClick={changeModalState} style={collectibleStyle}>\r\n\r\n            {collectibleModalState === true &&\r\n                <CollectibleModal\r\n                    account={account}\r\n                    collectible={collectible}\r\n                    collectibleModalState={collectibleModalState}\r\n                    setCollectibleModalState={changeModalState}\r\n                    onBuyRequest={onBuyRequest}\r\n                    onUpdatePrice={onUpdatePrice}\r\n                    onBurnRequest={onBurnRequest}\r\n                    fee={fee}\r\n                />\r\n            }\r\n            <div style={{ margin: \"10px\" }}>\r\n                <li key={collectible.tokenID}>\r\n                    <div style={{ backgroundColor: collectible.priceLevel, borderRadius: \"4%\" }}>\r\n                        <img style={{ width: \"250px\", height: \"250px\", borderRadius: \"10%\", padding: \"5px\" }}\r\n                            alt={collectible.tokenDescription} src={collectible.tokenURI} />\r\n                    </div>\r\n                    <p style={{ color: collectible.priceLevel, textAlign: \"center\", fontWeight: \"bold\" }}>\r\n                        {collectible.tokenDescription}\r\n                    </p>\r\n                    <p style={{ color: collectible.priceLevel, textAlign: \"center\", fontWeight: \"bold\" }}>\r\n                        {collectible.priceOfCollectible} berkcoins\r\n                    </p>\r\n                    {collectible.availability === true &&\r\n                        <p style={{ color: \"blue\", textAlign: \"center\", fontWeight: \"bold\" }}>\r\n                            (On sale)\r\n                        </p>\r\n                    }\r\n                </li>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Collectible","import React, { useState } from 'react'\r\nimport Modal from \"react-modal\";\r\nModal.setAppElement('#root');\r\n\r\nconst RegisterModal = ({ modalState, setModalState, onRegister, fee }) => {\r\n    const [tokenURI, setTokenURI] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [price, setPrice] = useState(0);\r\n    const [availability, setAvailability] = useState(false);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onRegister(tokenURI, description, price, availability);\r\n        setTokenURI(\"\");\r\n        setDescription(\"\");\r\n        setPrice(0);\r\n        setModalState();\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <Modal isOpen={modalState}\r\n                shouldCloseOnOverlayClick={true}\r\n                shouldCloseOnEsc={true}\r\n                onRequestClose={setModalState}\r\n                centered\r\n                style={\r\n                    {\r\n                        overlay: {\r\n                            opacity: \"1\"\r\n                        },\r\n                        content: {\r\n                            borderRadius: \"4%\",\r\n                            backgroundColor: \"#92A8D1\",\r\n                            width: \"35%\",\r\n                            height: \"60%\",\r\n                            margin: \"auto\"\r\n                        },\r\n                    }\r\n                }>\r\n\r\n                <button style={{ float: \"right\", marginTop: \"1%\" }} onClick={setModalState}>Close</button>\r\n                <h1 >Register a NFT:</h1>\r\n                {tokenURI !== \"\" &&\r\n                    <div style={{ display: \"inline\", float: \"right\", margin: \"5%\", textAlign: \"center\" }} >\r\n                        <p>NFT Appearance</p>\r\n                        <img style={{ width: \"100px\", height: \"100px\", borderRadius: \"10%\", margin: \"0 auto\" }} alt=\"collectible\" src={tokenURI} />\r\n                    </div>\r\n                }\r\n                <form id=\"newOrder\" onSubmit={onSubmit}>\r\n                    <label>Collectible Token URI: </label>\r\n                    <input type=\"string\" required\r\n                        value={tokenURI} onChange={(e) => setTokenURI(e.target.value)} />\r\n                    <label>Collectible Description: </label>\r\n                    <input type=\"string\" required\r\n                        value={description} onChange={(e) => setDescription(e.target.value)} />\r\n                    <label>Collectible Price (berkcoins): </label>\r\n                    <input type=\"number\" required\r\n                        value={price} onChange={(e) => setPrice(e.target.value)} />\r\n                    <input style={{ float: \"right\", margin: \"0\", padding: \"0\", marginTop: \"2%\" }} type=\"checkbox\"\r\n                        value={availability} onChange={(e) => setAvailability(!availability)} />\r\n                    <label style={{ display: \"inline\" }}>Set available: </label>\r\n                    <h3 style={{ marginLeft: \"10%\" }}>Collectible will {!availability && \"not\"} be listed as available for trade.</h3>\r\n                    {price !== 0 && <h3 style={{ color: \"red\", marginLeft: \"10%\" }}>You will pay {fee} berkcoins registration fee.</h3>}\r\n                    <button style={{ display: \"flex\", margin: \"auto\", marginTop: \"5%\" }}>Register</button>\r\n                </form>\r\n            </Modal >\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default RegisterModal","import { useState, useEffect } from \"react\";\r\nimport React from 'react';\r\nimport LoadingTriangle from \"../PageComponents/LoadingTriangle\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Collectible from \"./Collectible\";\r\nimport RegisterModal from \"./RegisterModal\";\r\nimport { getCollectibles } from \"../../services/ContractHelper\";\r\n\r\n\r\nconst Market = ({ account, contract, refresher }) => {\r\n    const [modalState, setModalState] = useState(false);\r\n    const [collectibles, setCollectibles] = useState(undefined);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [sort, setSort] = useState(\"Sort By Price\");\r\n    const [fee, setFee] = useState(0);\r\n\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        getAllNFTs();\r\n        refresher();\r\n    }, [refresh, refresher])\r\n\r\n    useEffect(() => {\r\n        navigate(\"/market\");\r\n    }, [navigate, sort]);\r\n\r\n\r\n    const getAllNFTs = async () => {\r\n        const fee = await contract.methods.getCollectibleFee()\r\n            .call({ from: account });\r\n        setFee(fee);\r\n\r\n        const retrievedCollectibles = await getCollectibles(account, contract);\r\n        setCollectibles(retrievedCollectibles);\r\n    }\r\n\r\n    const registerNFT = () => {\r\n        setModalState(true);\r\n    }\r\n\r\n    const onRegister = async (tokenURI, description, price, availability) => {\r\n        await contract.methods.registerNewCollectible(tokenURI, description, price, availability)\r\n            .send({ from: account });\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const onBuy = async (tokenID) => {\r\n        await contract.methods.buyCollectible(tokenID)\r\n            .send({ from: account });\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const onSetPrice = async (tokenID, newPrice, availability) => {\r\n        const oldPrice = collectibles.find({ tokenID }).priceOfCollectible;\r\n        if (oldPrice !== newPrice) {\r\n            await contract.methods.setPriceOfCollectible(tokenID, newPrice)\r\n                .send({ from: account });\r\n        }\r\n\r\n        const currentAvailabilityStatus = await contract.methods.getAvailabilityOfToken(tokenID)\r\n            .call({ from: account });\r\n        if (availability !== currentAvailabilityStatus) {\r\n            await contract.methods.setAvailabilityOfCollectible(tokenID, availability)\r\n                .send({ from: account });\r\n        }\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const onSort = () => {\r\n        if (sort === \"Sort By Price\") {\r\n            const sortedArr = collectibles.sort(function (a, b) {\r\n                return b.priceOfCollectible - a.priceOfCollectible;\r\n            });\r\n            setCollectibles(sortedArr);\r\n            setSort(\"Sort By Default\");\r\n        }\r\n        else {\r\n            setSort(\"Sort By Price\");\r\n            getAllNFTs();\r\n        }\r\n    }\r\n\r\n    const onBurn = async (tokenID) => {\r\n        await contract.methods.burnCollectible(tokenID)\r\n            .send({ from: account });\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Berkcoin NFT Marketplace</h1>\r\n            <button onClick={registerNFT}>Register a NFT</button>\r\n            <button style={{ float: \"right\" }} onClick={onSort}>{sort}</button>\r\n            {modalState === true &&\r\n                <RegisterModal\r\n                    modalState={modalState}\r\n                    setModalState={() => setModalState(!modalState)}\r\n                    onRegister={onRegister}\r\n                    fee={fee} />\r\n            }\r\n            <ul style={{ listStyleType: \"none\" }}>\r\n                {collectibles !== undefined && collectibles.slice(0).map((collectible) => (\r\n                    <Collectible\r\n                        account={account}\r\n                        collectible={collectible}\r\n                        onBuy={onBuy}\r\n                        onSetPrice={onSetPrice}\r\n                        onBurn={onBurn}\r\n                        fee={fee}\r\n                    />\r\n                ))}\r\n                {collectibles === undefined &&\r\n                    <LoadingTriangle />\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Market","import React, { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useState } from \"react\"\r\nimport { BigNumber } from \"bignumber.js\"\r\n\r\nconst Trade = ({ account, contract, balance, ethBalance, getBalance }) => {\r\n    const [depositAmount, setDepositAmount] = useState(0);\r\n    const [depositPrice, setDepositPrice] = useState(0);\r\n    const [userPrice, setUserPrice] = useState(0);\r\n\r\n    const [withdrawAmount, setWithdrawAmount] = useState(0);\r\n    const [withdrawPrice, setWithdrawPrice] = useState(0);\r\n\r\n    const [transferAmount, setTransferAmount] = useState(0);\r\n    const [transferAddress, setTransferAddress] = useState(\"0x..\");\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const fetchCurrentTokenPrice = async () => {\r\n            const response = await contract.methods.getTokenPrice()\r\n                .call({ from: account });\r\n            setDepositPrice(response);\r\n            setUserPrice(response / 10 ** 18)\r\n            setWithdrawPrice(response);\r\n        }\r\n\r\n        fetchCurrentTokenPrice();\r\n    }, [account, contract.methods]);\r\n\r\n    const deposit = async () => {\r\n        let normalizedUserPrice = new BigNumber(userPrice).multipliedBy(10 ** 18).toFixed();\r\n        let finalPrice = normalizedUserPrice > depositPrice ? normalizedUserPrice : depositPrice;\r\n        await contract.methods.deposit(depositAmount)\r\n            .send({ from: account, value: depositAmount * finalPrice });\r\n        getBalance();\r\n    };\r\n\r\n    const withdraw = async () => {\r\n        await contract.methods.withdraw(withdrawAmount)\r\n            .send({ from: account });\r\n        getBalance();\r\n    };\r\n\r\n    const transfer = async () => {\r\n        await contract.methods.send(transferAddress, transferAmount)\r\n            .send({ from: account });\r\n        getBalance();\r\n    };\r\n\r\n    const onBuy = (e) => {\r\n        e.preventDefault();\r\n        deposit();\r\n        navigate('/wallet');\r\n    }\r\n\r\n    const onSell = (e) => {\r\n        e.preventDefault();\r\n        withdraw();\r\n        navigate('/wallet');\r\n    }\r\n\r\n\r\n    const onTransfer = (e) => {\r\n        e.preventDefault();\r\n        transfer();\r\n        navigate('/wallet');\r\n    }\r\n\r\n    return (\r\n        <div id=\"trade\">\r\n            <div id=\"trade-child\">\r\n                <h2>Buy berkcoin</h2>\r\n                <p style={{ marginLeft: \"25%\" }}>ETH Balance: {ethBalance}</p>\r\n                <form id=\"newOrder\" onSubmit={onBuy}>\r\n                    <label>Amount: </label>\r\n                    <input type=\"number\" required\r\n                        value={depositAmount} onChange={(e) => setDepositAmount(e.target.value)} />\r\n                    <label>Current Price: </label>\r\n                    <input type=\"number\" required\r\n                        value={userPrice} onChange={(e) => setUserPrice(e.target.value)} />\r\n                    {depositAmount !== 0 && <h3 style={{ color: \"green\", textAlign: \"center\" }}>You will pay {depositAmount * depositPrice / 10 ** 18} ETH</h3>}\r\n                    <button style={{ display: \"inline-block\", marginLeft: \"39%\" }}>Buy berkcoin</button>\r\n                </form>\r\n            </div>\r\n            <div id=\"trade-child\">\r\n                <h2>Sell berkcoin</h2>\r\n                <p style={{ marginLeft: \"25%\" }}>Berkcoin balance: {balance}</p>\r\n                <form id=\"newOrder\" onSubmit={onSell}>\r\n                    <label>Amount: </label>\r\n                    <input type=\"number\" required\r\n                        value={withdrawAmount} onChange={(e) => setWithdrawAmount(e.target.value)} />\r\n                    <label>Current Price: </label>\r\n                    <input type=\"number\" required defaultValue={withdrawPrice / 10 ** 18} />\r\n                    {withdrawAmount !== 0 && <h3 style={{ color: \"green\", textAlign: \"center\" }}>You will get {withdrawAmount * withdrawPrice / 10 ** 18} ETH</h3>}\r\n                    <button style={{ display: \"inline-block\", marginLeft: \"39%\" }}>Sell berkcoin</button>\r\n                </form>\r\n            </div>\r\n            <div >\r\n                <h2>Send berkcoin</h2>\r\n                <form id=\"newOrder\" onSubmit={onTransfer}>\r\n                    <label>Amount: </label>\r\n                    <input type=\"number\" required\r\n                        value={transferAmount} onChange={(e) => setTransferAmount(e.target.value)} />\r\n                    <label>Recipient wallet address:</label>\r\n                    <input type=\"text\" required\r\n                        value={transferAddress} onChange={(e) => setTransferAddress(e.target.value)} />\r\n                    <button style={{ display: \"inline-block\", marginLeft: \"39%\" }}>Send berkcoin</button>\r\n                </form>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Trade","import { useState, useEffect } from \"react\";\r\nimport React from 'react';\r\n\r\nconst Staking = ({ account, contract, balance }) => {\r\n    // inputs\r\n    const [depositAmount, setDepositAmount] = useState(0);\r\n    const [stakeDuration, setStakeDuration] = useState(0);\r\n    const [refresh, setRefresh] = useState(false);\r\n\r\n    // views\r\n    const [stakedDuration, setStakedDuration] = useState(\"\");\r\n    const [stakedBalance, setStakedBalance] = useState(0);\r\n    const [stakeReward, setStakeReward] = useState(0);\r\n    const [calculatedStakeReward, setCalculatedStakeReward] = useState(0);\r\n    const [interestRate, setInterestRate] = useState(0);\r\n    const [availableStake, setAvailableStake] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        if (contract !== undefined) {\r\n            getStakedAmount();\r\n            getCurrentStakeReward();\r\n            getStakeCompletionDate();\r\n            getInterest();\r\n            getContractBalance();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [contract, refresh])\r\n\r\n    useEffect(() => {\r\n        calculateStakeReward();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [depositAmount, stakeDuration])\r\n\r\n    const onStake = async (e) => {\r\n        e.preventDefault();\r\n        await contract.methods.stake(stakeDuration * 60 * 60, depositAmount)\r\n            .send({ from: account });\r\n\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const getStakedAmount = async () => {\r\n        const response = await contract.methods.getStakeAmount(account)\r\n            .call({ from: account });\r\n        setStakedBalance(response);\r\n    };\r\n\r\n    const getCurrentStakeReward = async () => {\r\n        const response = await contract.methods.getCurrentStakeReward(account)\r\n            .call({ from: account });\r\n        setStakeReward(response);\r\n    };\r\n\r\n    const getStakeCompletionDate = async () => {\r\n        const response = await contract.methods.getStakeCompletionDate(account)\r\n            .call({ from: account });\r\n\r\n        if (response === 0) {\r\n            setStakedDuration(\"NaN\");\r\n            return;\r\n        }\r\n\r\n        const date = new Date(response * 1000).toLocaleDateString(\"en-US\");\r\n        const time = new Date(response * 1000).toLocaleTimeString(\"en-US\");\r\n        setStakedDuration(date + \" \" + time);\r\n    };\r\n\r\n    const getInterest = async () => {\r\n        const response = await contract.methods.getInterest()\r\n            .call({ from: account });\r\n        setInterestRate(response);\r\n    }\r\n\r\n    const getContractBalance = async () => {\r\n        const response = await contract.methods.getContractBalance()\r\n            .call({ from: account });\r\n        setAvailableStake(response / 10 ** 18);\r\n    }\r\n\r\n    const calculateStakeReward = () => {\r\n        let stakeRate = interestRate;\r\n        stakeRate = stakeRate * stakeDuration * 60 * 60;\r\n\r\n        // More than 100 ETH:\r\n        if (depositAmount > 100) {\r\n            stakeRate = stakeRate * 2;\r\n        }\r\n        setCalculatedStakeReward(depositAmount * stakeRate / 1000000000);\r\n    }\r\n\r\n    const checkStakeStatus = async () => {\r\n        const currentTimeStamp = Math.round((new Date()).getTime() / 1000);\r\n        try {\r\n            if (stakedBalance === 0) {\r\n                throw Error(\"Stake balance is 0!\");\r\n            }\r\n            await contract.methods.checkStakeStatus(account, currentTimeStamp)\r\n                .send({ from: account });\r\n\r\n            setRefresh(!refresh);\r\n        }\r\n        catch (error) {\r\n            alert(\"Error on withdraw!\");\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    if (contract === undefined) {\r\n        return (\r\n            <div>Mounting the smart contract, please wait.</div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>Wallet Public Address: {account} <span style={{ float: \"right\" }}>\r\n                Total Token Value: {availableStake} ETH</span>\r\n            </h3>\r\n            <h3>Balance: {balance}</h3>\r\n            <h3>Staked amount: {stakedBalance}</h3>\r\n            <h3>Earnings from staking : {stakeReward}</h3>\r\n            <h3>Staking will end : {stakedDuration}</h3>\r\n            <button onClick={checkStakeStatus}\r\n                style={{ display: \"inline-block\" }}>Withdraw stake</button>\r\n\r\n            <div id=\"trade\">\r\n                <h2>Stake berkcoin</h2>\r\n                <form id=\"newOrder\" onSubmit={onStake}>\r\n                    <label>Stake Amount: </label>\r\n                    <input type=\"number\" required\r\n                        value={depositAmount} onChange={(e) => setDepositAmount(e.target.value)} />\r\n                    <label>Duration (hours): </label>\r\n                    <input type=\"number\" required\r\n                        value={stakeDuration} onChange={(e) => setStakeDuration(e.target.value)} />\r\n                    <h3 style={{ color: \"green\", textAlign: \"center\" }}>\r\n                        You will earn {calculatedStakeReward} berkcoins after stake completion.\r\n                    </h3>\r\n                    <button style={{ display: \"inline-block\", marginLeft: \"36%\" }}>Stake berkcoin</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Staking","import React, { useState } from 'react'\r\nimport Modal from \"react-modal\";\r\nModal.setAppElement('#root');\r\n\r\nconst PostModal = ({ modalState, setModalState, onSend }) => {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onSend(title, text);\r\n        setTitle(\"\");\r\n        setText(\"\");\r\n        setModalState();\r\n    }\r\n\r\n\r\n    return (\r\n        <div >\r\n            <Modal isOpen={modalState}\r\n                shouldCloseOnOverlayClick={true}\r\n                shouldCloseOnEsc={true}\r\n                onRequestClose={setModalState}\r\n                centered\r\n                style={\r\n                    {\r\n                        overlay: {\r\n                            opacity: \"1\"\r\n                        },\r\n                        content: {\r\n                            borderRadius: \"4%\",\r\n                            backgroundColor: \"#92A8D1\",\r\n                            width: \"35%\",\r\n                            height: \"50%\",\r\n                            margin: \"auto\"\r\n                        },\r\n                    }\r\n                }>\r\n\r\n                <button style={{ float: \"right\", marginTop: \"1%\" }} onClick={setModalState}>Close</button>\r\n                <h1>Send a new post:</h1>\r\n                <form onSubmit={onSubmit}>\r\n                    <label>Title: </label>\r\n                    <input type=\"string\" required\r\n                        value={title} onChange={(e) => setTitle(e.target.value)} />\r\n                    <label>Text: </label>\r\n                    <textarea type=\"string\" required\r\n                        value={text} onChange={(e) => setText(e.target.value)}\r\n                        style={{ height: \"200px\" }} />\r\n                    <button style={{ display: \"flex\", margin: \"auto\", marginTop: \"5%\" }}>Send</button>\r\n                </form>\r\n            </Modal >\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default PostModal;","import React from 'react';\r\nimport { useState, useEffect } from \"react\";\r\nimport LoadingTriangle from \"../PageComponents/LoadingTriangle\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getPosts } from \"../../services/ContractHelper\";\r\nimport PostModal from \"./PostModal\";\r\nimport Post from './Post';\r\n\r\nconst Social = ({ account, contract, refresher }) => {\r\n    const [modalState, setModalState] = useState(false);\r\n    const [posts, setPosts] = useState(undefined);\r\n    const [refresh, setRefresh] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        getAllPosts();\r\n        refresher();\r\n    }, [refresh, refresher])\r\n\r\n    useEffect(() => {\r\n        navigate(\"/social\");\r\n    }, [navigate]);\r\n\r\n    const getAllPosts = async () => {\r\n        const posts = await getPosts(account, contract);\r\n        setPosts(posts);\r\n    }\r\n\r\n    const sendPost = () => {\r\n        setModalState(true);\r\n    }\r\n\r\n    const onSend = async (title, text) => {\r\n        await contract.methods.sendPost(title, text)\r\n            .send({ from: account });\r\n        setRefresh(!refresh);\r\n    };\r\n\r\n    const onVote = async (postID, vote) => {\r\n        await contract.methods.votePost(postID, vote)\r\n            .send({ from: account });\r\n        setRefresh(!refresh);\r\n    };\r\n\r\n    const onBurn = async (postID) => {\r\n        await contract.methods.burnPost(postID)\r\n            .send({ from: account });\r\n        setRefresh(!refresh);\r\n    };\r\n\r\n    const onSort = () => {\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>This page is under construction.</h3>\r\n        </div>\r\n    )\r\n    return (\r\n        <div>\r\n            <link rel=\"stylesheet\"\r\n                href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\r\n            <button onClick={sendPost}>New Post</button>\r\n            <button style={{ float: \"right\" }} onClick={onSort}>Sort by votes</button>\r\n            <h3> Posts from users: </h3>\r\n            {modalState === true &&\r\n                <PostModal\r\n                    modalState={modalState}\r\n                    setModalState={() => setModalState(!modalState)}\r\n                    onSend={onSend} />\r\n            }\r\n\r\n            <ul style={{ listStyleType: \"none\" }}>\r\n                {posts !== undefined && posts.slice(0).map((post) => (\r\n                    <Post post={post} onVote={onVote} />\r\n                ))}\r\n\r\n                {posts === undefined &&\r\n                    <LoadingTriangle />\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Social;","import React from 'react'\r\nexport const Header = ({ account, connect }) => {\r\n    return (\r\n        <div className='header'>\r\n            <span style={{ float: \"left\" }}>Wallet Connection Status: {\r\n                account === undefined ?\r\n                    <span onClick={connect} style={{ color: \"red\" }}>Not Connected</span> :\r\n                    <span style={{ color: \"green\" }}>Connected</span>\r\n            }\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\"\nimport { useState, useEffect } from \"react\"\n\nimport getWeb3 from \"./services/getWeb3\";\nimport BerkToken from \"./contracts/BerkToken\";\n\nimport Nav from \"./components/PageComponents/Nav\";\nimport Wallet from \"./components/TokenComponents/Wallet\";\nimport Market from \"./components/CollectibleComponents/Market\";\nimport Trade from \"./components/TokenComponents/Trade\";\nimport Staking from \"./components/TokenComponents/Staking\";\nimport Social from \"./components/SocialComponents/Social\";\nimport { Header } from './components/PageComponents/Header';\nimport LoadingTriangle from './components/PageComponents/LoadingTriangle';\n\nfunction App() {\n  // Rewriting truffle generated code for react hooks:\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [contract, setContract] = useState(undefined);\n  const [balance, setBalance] = useState(0);\n  const [ethBalance, setEthBalance] = useState(0);\n\n  useEffect(() => {\n    componentDidMount();\n  }, [])\n\n  useEffect(() => {\n    if (web3 !== undefined && accounts !== undefined && contract !== undefined) {\n      getBalance();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [web3, accounts, contract])\n\n  const componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BerkToken.networks[networkId];\n      const instance = new web3.eth.Contract(\n        BerkToken.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      setWeb3(web3);\n      setAccounts(accounts);\n      setContract(instance);\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  const getBalance = async () => {\n    const response = await contract.methods.getBalance(accounts[0])\n      .call({ from: accounts[0] });\n    setBalance(response);\n    const ethBalance = await web3.eth.getBalance(accounts[0]);\n    setEthBalance(web3.utils.fromWei(ethBalance, 'ether'));\n  };\n\n\n  if (web3 === undefined || accounts === undefined || contract === undefined) {\n    return (\n      <Router basename='berkcoin'>\n        <Header\n          account={undefined}\n          connect={() => window.location.reload()} />\n        <Nav />\n        <h2 style={{ textAlign: \"center\" }}>Waiting for wallet connection...</h2>\n        <LoadingTriangle />\n      </Router>\n    );\n  }\n\n  return (\n    <Router basename='berkcoin'>\n      <Header\n        account={accounts[0]}\n      />\n      <Nav />\n      <Routes>\n        <Route path='/' element={<Navigate to={\"/wallet\"} />} />\n\n        <Route path='/wallet' element={<Wallet\n          web3={web3}\n          contract={contract}\n          account={accounts[0]}\n          balance={balance} />} />\n\n        <Route path='/market' element={<Market\n          account={accounts[0]}\n          contract={contract}\n          refresher={() => getBalance()} />} />\n\n        <Route path='/trade' element={<Trade\n          account={accounts[0]}\n          contract={contract}\n          balance={balance}\n          ethBalance={ethBalance}\n          getBalance={getBalance} />} />\n\n        <Route path='/staking' element={<Staking\n          account={accounts[0]}\n          contract={contract}\n          balance={balance} />} />\n\n        <Route path='/social' element={<Social\n          account={accounts[0]}\n          contract={contract}\n          refresher={() => getBalance()} />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './services/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}