{"version":3,"sources":["services/getWeb3.js","components/PageComponents/Nav.js","components/PageComponents/LoadingTriangle.js","components/TokenComponents/Wallet.js","components/CollectibleComponents/CollectibleModal.js","components/CollectibleComponents/Collectible.js","components/CollectibleComponents/RegisterModal.js","components/CollectibleComponents/Market.js","components/TokenComponents/Trade.js","components/TokenComponents/Staking.js","components/PageComponents/Header.js","App.js","services/serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","async","ethereum","web3","Web3","enable","error","console","log","provider","providers","HttpProvider","Nav","className","to","LoadingTriangle","style","display","justifyContent","margin","color","height","width","Wallet","account","balance","useState","transactions","setTransactions","useEffect","retrieveTransactions","abiDecoder","addABI","BerkToken","abi","pastLogs","eth","getPastLogs","fromBlock","address","filteredTransactions","Set","forEach","transaction","getTransaction","transactionHash","from","decodedLog","decodeMethod","input","undefined","has","hash","add","value","name","params","push","length","slice","map","key","href","target","rel","Modal","setAppElement","CollectibleModal","collectible","collectibleModalState","setCollectibleModalState","onBuyRequest","onUpdatePrice","onBurnRequest","fee","isOwner","setOwner","priceOfCollectible","price","setPrice","priceChange","setPriceChange","availability","setAvailability","modalState","setModalState","tokenOwner","onClick","e","stopPropagation","isOpen","shouldCloseOnEsc","onRequestClose","centered","overlay","opacity","content","borderRadius","backgroundColor","priceLevel","src","tokenURI","textAlign","fontWeight","tokenDescription","tokenCreator","collectibleHash","float","marginTop","id","onSubmit","preventDefault","type","required","onChange","padding","Collectible","onBuy","onSetPrice","onBurn","changeModalState","cursor","tokenID","newPrice","RegisterModal","onRegister","setTokenURI","description","setDescription","shouldCloseOnOverlayClick","marginLeft","Market","contract","refresher","collectibles","setCollectibles","refresh","setRefresh","sort","setSort","setFee","navigate","useNavigate","getAllNFTs","methods","getCollectibleFee","call","tokenCount","getTokenCount","i","getAccessibility","getTokenURI","getTokenOwner","getTokenCreator","getTokenDescription","getPriceOfCollectible","getTokenHash","getAvailabilityOfToken","buyCollectible","send","find","setPriceOfCollectible","setAvailabilityOfCollectible","burnCollectible","sortedArr","a","b","registerNewCollectible","listStyleType","Trade","ethBalance","getBalance","depositAmount","setDepositAmount","depositPrice","setDepositPrice","userPrice","setUserPrice","withdrawAmount","setWithdrawAmount","withdrawPrice","setWithdrawPrice","transferAmount","setTransferAmount","transferAddress","setTransferAddress","response","getTokenPrice","fetchCurrentTokenPrice","normalizedUserPrice","BigNumber","multipliedBy","toFixed","finalPrice","deposit","withdraw","defaultValue","transfer","Staking","stakeDuration","setStakeDuration","stakedDuration","setStakedDuration","stakedBalance","setStakedBalance","stakeReward","setStakeReward","calculatedStakeReward","setCalculatedStakeReward","interestRate","setInterestRate","availableStake","setAvailableStake","getStakedAmount","getCurrentStakeReward","getStakeCompletionDate","getInterest","getContractBalance","calculateStakeReward","getStakeAmount","date","Date","toLocaleDateString","time","toLocaleTimeString","stakeRate","currentTimeStamp","Math","round","getTime","checkStakeStatus","alert","stake","Header","connect","App","setWeb3","accounts","setAccounts","setContract","setBalance","setEthBalance","componentDidMount","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","utils","fromWei","basename","location","reload","path","element","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f140cc58.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n\n        //App.web3Provider = web3.currentProvider;\n        //web3 = new Web3(web3.currentProvider);\n\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import { Link } from 'react-router-dom'\r\nimport React from 'react';\r\nconst Nav = () => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <ul className=\"nav\">\r\n                    <li className=\"nav\"><Link to=\"/wallet\">Wallet</Link></li>\r\n                    <li className=\"nav\"><Link to=\"/market\">Market</Link></li>\r\n                    <li className=\"nav\"><Link to=\"/trade\">Trade</Link></li>\r\n                    <li className=\"nav\"><Link to=\"/staking\">Staking</Link></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav","import React from 'react';\r\nimport { BallTriangle } from 'react-loader-spinner';\r\n\r\nconst LoadingTriangle = () => {\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\", margin: \"10%\" }}>\r\n            <BallTriangle color=\"#00BFFF\" height={200} width={200} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingTriangle","import React, { useEffect, useState } from 'react';\r\nimport LoadingTriangle from '../PageComponents/LoadingTriangle';\r\nimport abiDecoder from 'abi-decoder';\r\nimport BerkToken from '../../contracts/BerkToken.json';\r\n\r\nconst Wallet = ({ web3, account, balance }) => {\r\n    // API URI can be changed based on the network where token was deployed.\r\n    const apiURI = \"http://ropsten.etherscan.io/tx/\";\r\n    const contractAddress = \"0x4f96994119416199e1276a59b580e070278da3a1\";\r\n\r\n    const [transactions, setTransactions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        retrieveTransactions();\r\n        return () => {\r\n            setTransactions([]);\r\n        }\r\n\r\n    }, [])\r\n\r\n    const retrieveTransactions = async () => {\r\n        abiDecoder.addABI(BerkToken.abi);\r\n        const transactions = [];\r\n        // We can easily fetch indexed transactions:\r\n        const pastLogs = await web3.eth.getPastLogs(\r\n            { fromBlock: '0x0', address: contractAddress });\r\n        // Decoding transactions inputs:\r\n        const filteredTransactions = new Set();\r\n        pastLogs.forEach(async (log) => {\r\n            const transaction = await web3.eth.getTransaction(log.transactionHash);\r\n            if (transaction.from === account) {\r\n                const decodedLog = abiDecoder.decodeMethod(transaction.input);\r\n                if (decodedLog !== undefined) {\r\n                    if (filteredTransactions.has(transaction.hash) === false) {\r\n                        filteredTransactions.add(transaction.hash);\r\n                        var value = 0;\r\n                        if (decodedLog.name === \"send\" || decodedLog.name === \"stake\") {\r\n                            const params = decodedLog.params;\r\n                            value = params[1].value;\r\n                        }\r\n                        transactions.push({\r\n                            \"hash\": transaction.hash,\r\n                            \"log\": decodedLog,\r\n                            \"value\": value\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        setTransactions(transactions);\r\n    }\r\n\r\n    return (\r\n        <div style={{ margin: \"0 auto\" }}>\r\n            <h3>User: {account}</h3>\r\n            <h3>User Balance: {balance} {balance !== 0 && \"berkcoins\"}</h3>\r\n            <h3>Your Latest Transactions:</h3>\r\n            {transactions.length !== 0 &&\r\n                <table className=\"transactionList\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th >Transaction Hash</th>\r\n                            <th >Transaction Method</th>\r\n                            <th >Berkcoin Value</th>\r\n                        </tr>\r\n                        {transactions.slice(0).map((transaction) => (\r\n                            <tr key={transaction.hash}>\r\n                                <td >\r\n                                    <a style={{ color: \"green\" }}\r\n                                        href={apiURI + transaction.hash}\r\n                                        target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                        {transaction.hash}\r\n                                        <span>&#x2197;</span>\r\n                                    </a>\r\n                                </td>\r\n                                <td>{transaction.log.name}</td>\r\n                                <td>{transaction.value}</td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            }\r\n            {transactions.length === 0 &&\r\n                <LoadingTriangle />\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Wallet","import React, { useState, useEffect } from 'react'\r\nimport Modal from \"react-modal\";\r\nModal.setAppElement('#root');\r\n\r\nexport const CollectibleModal = ({ account, collectible, collectibleModalState, setCollectibleModalState, onBuyRequest, onUpdatePrice, onBurnRequest, fee }) => {\r\n    const [isOwner, setOwner] = useState(false);\r\n    const [price, setPrice] = useState(collectible.priceOfCollectible);\r\n    const [priceChange, setPriceChange] = useState(false);\r\n    const [availability, setAvailability] = useState(false);\r\n    const [modalState, setModalState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (collectible.tokenOwner === account) {\r\n            setOwner(true);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (collectible.priceOfCollectible !== price) {\r\n            setPriceChange(true);\r\n        }\r\n        else {\r\n            setPriceChange(false);\r\n        }\r\n    }, [price])\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onUpdatePrice(price, availability);\r\n        setModalState(!modalState);\r\n    }\r\n\r\n    return (\r\n        <div onClick={(e) => e.stopPropagation()}>\r\n            <Modal isOpen={collectibleModalState}\r\n                shouldCloseOnEsc={true}\r\n                onRequestClose={setCollectibleModalState}\r\n                centered\r\n                style={\r\n                    {\r\n                        overlay: {\r\n                            opacity: \"1\"\r\n                        },\r\n                        content: {\r\n                            borderRadius: \"4%\",\r\n                            backgroundColor: \"#9BB7D4\",\r\n                            width: \"33%\",\r\n                            height: \"60%\",\r\n                            margin: \"auto\"\r\n                        },\r\n                    }\r\n                }>\r\n                <div>\r\n                    <div style={{ backgroundColor: collectible.priceLevel, borderRadius: \"4%\", width: \"40%\", display: \"flex\", margin: \"0 auto\" }}>\r\n                        <img style={{ width: \"250px\", height: \"250px\", borderRadius: \"10%\", display: \"flex\", margin: \"0 auto\" }} src={collectible.tokenURI} />\r\n                    </div>\r\n                    <p style={{ color: collectible.priceLevel, textAlign: \"center\", fontWeight: \"bold\" }}>{collectible.tokenDescription}</p>\r\n                    <p style={{ color: collectible.priceLevel, textAlign: \"center\", fontWeight: \"bold\" }}>{collectible.priceOfCollectible} berkcoins</p>\r\n                    <p style={{ color: \"blue\", textAlign: \"center\", fontWeight: \"bold\" }}>Created By: {collectible.tokenCreator}</p>\r\n                    <p style={{ color: \"blue\", textAlign: \"center\", fontWeight: \"bold\" }}>Owner: {collectible.tokenOwner} {isOwner && <span>(you)</span>}</p>\r\n                    <p style={{ color: \"blue\", textAlign: \"center\", fontWeight: \"bold\" }}>Collectible Hash: {collectible.collectibleHash}</p>\r\n                    {isOwner && <button style={{ float: \"left\", marginTop: \"6%\" }} onClick={() => setModalState(!modalState)}>Update Collectible</button>}\r\n                    {!isOwner && collectible.availability === true && <button style={{ float: \"left\", marginTop: \"6%\" }} onClick={onBuyRequest}>Buy Collectible</button>}\r\n                    <button style={{ float: \"right\", marginTop: \"6%\" }} onClick={setCollectibleModalState}>Close</button>\r\n                </div>\r\n\r\n                <Modal isOpen={modalState}\r\n                    shouldCloseOnEsc={true}\r\n                    onRequestClose={() => setModalState(!modalState)}\r\n                    centered\r\n                    style={\r\n                        {\r\n                            overlay: {\r\n                                opacity: \"1\"\r\n                            },\r\n                            content: {\r\n                                borderRadius: \"4%\",\r\n                                backgroundColor: \"#9BB7D4\",\r\n                                width: \"28%\",\r\n                                height: \"38%\",\r\n                                margin: \"auto\"\r\n                            },\r\n                        }\r\n                    }>\r\n\r\n                    <div >\r\n                        <button style={{ float: \"right\" }} onClick={() => setModalState(!modalState)}>Close</button>\r\n                        <h2>Update Collectible:</h2>\r\n                        <form id=\"newOrder\" onSubmit={onSubmit}>\r\n                            <label>Enter a new price (berkcoins): </label>\r\n                            <input type=\"number\" required\r\n                                value={price} onChange={(e) => setPrice(e.target.value)} />\r\n                            <input style={{ float: \"right\", margin: \"0\", padding: \"0\", marginTop: \"2%\" }} type=\"checkbox\"\r\n                                value={availability} onChange={(e) => setAvailability(!availability)} />\r\n                            <label style={{ display: \"inline\" }}>Set available: </label>\r\n                            <h3 style={{ textAlign: \"center\" }}>Collectible will {!availability && \"not\"} be listed as available for trade.</h3>\r\n                            {priceChange === true && <h3 style={{ color: \"red\", textAlign: \"center\" }}>You will pay {fee} berkcoins price update fee.</h3>}\r\n                            <button style={{ float: \"right\", display: \"flex\", margin: \"auto\" }}>Update</button>\r\n                        </form>\r\n                        <button style={{ float: \"left\", color: \"red\" }} onClick={onBurnRequest}>Burn Collectible</button>\r\n                    </div>\r\n                </Modal>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { CollectibleModal } from './CollectibleModal';\r\n\r\nconst Collectible = ({ account, collectible, onBuy, onSetPrice, onBurn, fee }) => {\r\n    const [collectibleModalState, setCollectibleModalState] = useState(false);\r\n\r\n    const changeModalState = () => {\r\n        setCollectibleModalState(!collectibleModalState);\r\n    }\r\n\r\n    const onBuyRequest = () => {\r\n        onBuy(collectible.tokenID);\r\n    }\r\n\r\n    const onUpdatePrice = (newPrice, availability) => {\r\n        onSetPrice(collectible.tokenID, newPrice, availability);\r\n    }\r\n\r\n    const onBurnRequest = () => {\r\n        onBurn(collectible.tokenID);\r\n        changeModalState();\r\n    }\r\n\r\n    return (\r\n\r\n        <div onClick={changeModalState} style={{ display: \"flex\", justifyContent: \"center\", margin: \"3%\", backgroundColor: \"#9BB7D4\", width: \"300px\", height: \"390px\", borderRadius: \"4%\", float: \"left\", cursor: \"pointer\" }}>\r\n\r\n            {collectibleModalState === true &&\r\n                <CollectibleModal\r\n                    account={account}\r\n                    collectible={collectible}\r\n                    collectibleModalState={collectibleModalState}\r\n                    setCollectibleModalState={changeModalState}\r\n                    onBuyRequest={onBuyRequest}\r\n                    onUpdatePrice={onUpdatePrice}\r\n                    onBurnRequest={onBurnRequest}\r\n                    fee={fee}\r\n                />\r\n            }\r\n            <div style={{ margin: \"10px\" }}>\r\n                <li key={collectible.tokenID}>\r\n                    <div style={{ backgroundColor: collectible.priceLevel, borderRadius: \"4%\" }}>\r\n                        <img style={{ width: \"250px\", height: \"250px\", borderRadius: \"10%\", padding: \"5px\" }} src={collectible.tokenURI} />\r\n                    </div>\r\n                    <p style={{ color: collectible.priceLevel, textAlign: \"center\", fontWeight: \"bold\" }}>{collectible.tokenDescription}</p>\r\n                    <p style={{ color: collectible.priceLevel, textAlign: \"center\", fontWeight: \"bold\" }}>{collectible.priceOfCollectible} berkcoins</p>\r\n                    {collectible.availability === true && <p style={{ color: \"blue\", textAlign: \"center\", fontWeight: \"bold\" }}>(On sale)</p>}\r\n                </li>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Collectible","import React, { useState } from 'react'\r\nimport Modal from \"react-modal\";\r\nModal.setAppElement('#root');\r\n\r\nconst RegisterModal = ({ modalState, setModalState, onRegister, fee }) => {\r\n    const [tokenURI, setTokenURI] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [price, setPrice] = useState(0);\r\n    const [availability, setAvailability] = useState(false);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onRegister(tokenURI, description, price, availability);\r\n        setTokenURI(\"\");\r\n        setDescription(\"\");\r\n        setPrice(0);\r\n        setModalState();\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <Modal isOpen={modalState}\r\n                shouldCloseOnOverlayClick={true}\r\n                shouldCloseOnEsc={true}\r\n                onRequestClose={setModalState}\r\n                centered\r\n                style={\r\n                    {\r\n                        overlay: {\r\n                            opacity: \"1\"\r\n                        },\r\n                        content: {\r\n                            borderRadius: \"4%\",\r\n                            backgroundColor: \"#9BB7D4\",\r\n                            width: \"35%\",\r\n                            height: \"60%\",\r\n                            margin: \"auto\"\r\n                        },\r\n                    }\r\n                }>\r\n                <button style={{ \"float\": \"right\", \"marginTop\": \"1%\" }} onClick={setModalState}>Close</button>\r\n                <h1 >Register a NFT:</h1>\r\n                <form id=\"newOrder\" onSubmit={onSubmit}>\r\n                    <label>Collectible Token URI: </label>\r\n                    <input type=\"string\" required\r\n                        value={tokenURI} onChange={(e) => setTokenURI(e.target.value)} />\r\n                    <label>Collectible Description: </label>\r\n                    <input type=\"string\" required\r\n                        value={description} onChange={(e) => setDescription(e.target.value)} />\r\n                    <label>Collectible Price (berkcoins): </label>\r\n                    <input type=\"number\" required\r\n                        value={price} onChange={(e) => setPrice(e.target.value)} />\r\n\r\n\r\n                    <input style={{ float: \"right\", margin: \"0\", padding: \"0\", marginTop: \"2%\" }} type=\"checkbox\"\r\n                        value={availability} onChange={(e) => setAvailability(!availability)} />\r\n                    <label style={{ display: \"inline\" }}>Set available: </label>\r\n                    <h3 style={{ marginLeft: \"10%\" }}>Collectible will {!availability && \"not\"} be listed as available for trade.</h3>\r\n                    {price !== 0 && <h3 style={{ color: \"red\", textAlign: \"center\" }}>You will pay {fee} berkcoins registration fee.</h3>}\r\n                    <button style={{ display: \"flex\", margin: \"auto\", marginTop: \"5%\" }}>Register</button>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterModal","import { useState, useEffect } from \"react\";\r\nimport React from 'react';\r\nimport LoadingTriangle from \"../PageComponents/LoadingTriangle\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Collectible from \"./Collectible\";\r\nimport RegisterModal from \"./RegisterModal\";\r\n\r\n\r\nconst Market = ({ account, contract, refresher }) => {\r\n    const [modalState, setModalState] = useState(false);\r\n    const [collectibles, setCollectibles] = useState(undefined);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [sort, setSort] = useState(\"Sort By Price\");\r\n    const [fee, setFee] = useState(0);\r\n\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        getAllNFTs();\r\n        refresher();\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        navigate(\"/market\");\r\n    }, [sort]);\r\n\r\n\r\n    const getAllNFTs = async () => {\r\n        const fee = await contract.methods.getCollectibleFee()\r\n            .call({ from: account });\r\n        setFee(fee);\r\n\r\n        const collectibles = [];\r\n\r\n        const tokenCount = await contract.methods.getTokenCount()\r\n            .call({ from: account });\r\n\r\n        for (var i = 1; i <= tokenCount; i++) {\r\n            const accessibility = await contract.methods.getAccessibility(i)\r\n                .call({ from: account });\r\n            if (accessibility === false) {\r\n                continue;\r\n            }\r\n            const tokenURI = await contract.methods.getTokenURI(i)\r\n                .call({ from: account });\r\n            const tokenOwner = await contract.methods.getTokenOwner(i)\r\n                .call({ from: account });\r\n            const tokenCreator = await contract.methods.getTokenCreator(i)\r\n                .call({ from: account });\r\n            const tokenDescription = await contract.methods.getTokenDescription(i)\r\n                .call({ from: account });\r\n            const priceOfCollectible = await contract.methods.getPriceOfCollectible(i)\r\n                .call({ from: account });\r\n            const collectibleHash = await contract.methods.getTokenHash(i)\r\n                .call({ from: account });\r\n            const availability = await contract.methods.getAvailabilityOfToken(i)\r\n                .call({ from: account });\r\n\r\n            // Price level:\r\n            var priceLevel = \"green\";\r\n            if (priceOfCollectible >= 200000) {\r\n                priceLevel = \"darkviolet\";\r\n            }\r\n            else if (priceOfCollectible >= 100000) {\r\n                priceLevel = \"#ff5202\";\r\n            }\r\n            else if (priceOfCollectible >= 50000) {\r\n                priceLevel = \"red\";\r\n            }\r\n            else if (priceOfCollectible >= 10000) {\r\n                priceLevel = \"blue\";\r\n            }\r\n\r\n            const Collectible = {\r\n                \"tokenID\": i,\r\n                \"tokenURI\": tokenURI,\r\n                \"tokenCreator\": tokenCreator,\r\n                \"tokenOwner\": tokenOwner,\r\n                \"tokenDescription\": tokenDescription,\r\n                \"priceOfCollectible\": priceOfCollectible,\r\n                \"collectibleHash\": collectibleHash,\r\n                \"priceLevel\": priceLevel,\r\n                \"availability\": availability\r\n            }\r\n            collectibles.push(Collectible);\r\n        }\r\n        setCollectibles(collectibles);\r\n    }\r\n\r\n    const registerNFT = () => {\r\n        setModalState(true);\r\n    }\r\n\r\n    const onRegister = async (tokenURI, description, price, availability) => {\r\n        await contract.methods.registerNewCollectible(tokenURI, description, price, availability)\r\n            .send({ from: account });\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const onBuy = async (tokenID) => {\r\n        await contract.methods.buyCollectible(tokenID)\r\n            .send({ from: account });\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const onSetPrice = async (tokenID, newPrice, availability) => {\r\n        const oldPrice = collectibles.find(({ tokenID }) => tokenID === tokenID).priceOfCollectible;\r\n        if (oldPrice !== newPrice) {\r\n            await contract.methods.setPriceOfCollectible(tokenID, newPrice)\r\n                .send({ from: account });\r\n        }\r\n\r\n        const currentAvailabilityStatus = await contract.methods.getAvailabilityOfToken(tokenID)\r\n            .call({ from: account });\r\n        if (availability !== currentAvailabilityStatus) {\r\n            await contract.methods.setAvailabilityOfCollectible(tokenID, availability)\r\n                .send({ from: account });\r\n        }\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const onSort = () => {\r\n        if (sort === \"Sort By Price\") {\r\n            const sortedArr = collectibles.sort(function (a, b) {\r\n                return b.priceOfCollectible - a.priceOfCollectible;\r\n            });\r\n            setCollectibles(sortedArr);\r\n            setSort(\"Sort By Default\");\r\n        }\r\n        else {\r\n            setSort(\"Sort By Price\");\r\n            getAllNFTs();\r\n        }\r\n    }\r\n\r\n    const onBurn = async (tokenID) => {\r\n        await contract.methods.burnCollectible(tokenID)\r\n            .send({ from: account });\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Berkcoin NFT Marketplace</h1>\r\n            <button onClick={registerNFT}>Register a NFT</button>\r\n            <button style={{ float: \"right\" }} onClick={onSort}>{sort}</button>\r\n            {modalState === true && <RegisterModal\r\n                modalState={modalState}\r\n                setModalState={() => setModalState(!modalState)}\r\n                onRegister={onRegister}\r\n                fee={fee} />\r\n            }\r\n            <ul style={{ listStyleType: \"none\" }}>\r\n                {collectibles !== undefined && collectibles.slice(0).map((collectible) => (\r\n                    <Collectible\r\n                        account={account}\r\n                        collectible={collectible}\r\n                        onBuy={onBuy}\r\n                        onSetPrice={onSetPrice}\r\n                        onBurn={onBurn}\r\n                        fee={fee}\r\n                    />\r\n                ))}\r\n                {collectibles === undefined &&\r\n                    <LoadingTriangle />\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Market","import React, { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useState } from \"react\"\r\n\r\nimport { BigNumber } from \"bignumber.js\"\r\n\r\nconst Trade = ({ account, contract, balance, ethBalance, getBalance }) => {\r\n    const [depositAmount, setDepositAmount] = useState(0);\r\n    const [depositPrice, setDepositPrice] = useState(0);\r\n    const [userPrice, setUserPrice] = useState(0);\r\n\r\n    const [withdrawAmount, setWithdrawAmount] = useState(0);\r\n    const [withdrawPrice, setWithdrawPrice] = useState(0);\r\n\r\n    const [transferAmount, setTransferAmount] = useState(0);\r\n    const [transferAddress, setTransferAddress] = useState(\"0x..\");\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const fetchCurrentTokenPrice = async () => {\r\n            const response = await contract.methods.getTokenPrice()\r\n                .call({ from: account });\r\n            setDepositPrice(response);\r\n            setUserPrice(response / 10 ** 18)\r\n            setWithdrawPrice(response);\r\n        }\r\n\r\n        fetchCurrentTokenPrice();\r\n    }, []);\r\n\r\n    const deposit = async () => {\r\n        let normalizedUserPrice = new BigNumber(userPrice).multipliedBy(10 ** 18).toFixed();\r\n        let finalPrice = normalizedUserPrice > depositPrice ? normalizedUserPrice : depositPrice;\r\n        await contract.methods.deposit(depositAmount)\r\n            .send({ from: account, value: depositAmount * finalPrice });\r\n        getBalance();\r\n    };\r\n\r\n    const withdraw = async () => {\r\n        await contract.methods.withdraw(withdrawAmount)\r\n            .send({ from: account });\r\n        getBalance();\r\n    };\r\n\r\n    const transfer = async () => {\r\n        await contract.methods.send(transferAddress, transferAmount)\r\n            .send({ from: account });\r\n        getBalance();\r\n    };\r\n\r\n    const onBuy = (e) => {\r\n        e.preventDefault();\r\n        deposit();\r\n        navigate('/wallet');\r\n    }\r\n\r\n    const onSell = (e) => {\r\n        e.preventDefault();\r\n        withdraw();\r\n        navigate('/wallet');\r\n    }\r\n\r\n\r\n    const onTransfer = (e) => {\r\n        e.preventDefault();\r\n        transfer();\r\n        navigate('/wallet');\r\n    }\r\n\r\n    return (\r\n        <div id=\"trade\">\r\n            <div id=\"trade-child\">\r\n                <h2>Buy berkcoin</h2>\r\n                <p style={{ marginLeft: \"25%\" }}>ETH Balance: {ethBalance}</p>\r\n                <form id=\"newOrder\" onSubmit={onBuy}>\r\n                    <label>Amount: </label>\r\n                    <input type=\"number\" required\r\n                        value={depositAmount} onChange={(e) => setDepositAmount(e.target.value)} />\r\n                    <label>Current Price: </label>\r\n                    <input type=\"number\" required\r\n                        value={userPrice} onChange={(e) => setUserPrice(e.target.value)} />\r\n                    {depositAmount !== 0 && <h3 style={{ color: \"green\", textAlign: \"center\" }}>You will pay {depositAmount * depositPrice / 10 ** 18} ETH</h3>}\r\n                    <button style={{ display: \"inline-block\", marginLeft: \"39%\" }}>Buy berkcoin</button>\r\n                </form>\r\n            </div>\r\n            <div id=\"trade-child\">\r\n                <h2>Sell berkcoin</h2>\r\n                <p style={{ marginLeft: \"25%\" }}>Berkcoin balance: {balance}</p>\r\n                <form id=\"newOrder\" onSubmit={onSell}>\r\n                    <label>Amount: </label>\r\n                    <input type=\"number\" required\r\n                        value={withdrawAmount} onChange={(e) => setWithdrawAmount(e.target.value)} />\r\n                    <label>Current Price: </label>\r\n                    <input type=\"number\" required defaultValue={withdrawPrice / 10 ** 18} />\r\n                    {withdrawAmount !== 0 && <h3 style={{ color: \"green\", textAlign: \"center\" }}>You will get {withdrawAmount * withdrawPrice / 10 ** 18} ETH</h3>}\r\n                    <button style={{ display: \"inline-block\", marginLeft: \"39%\" }}>Sell berkcoin</button>\r\n                </form>\r\n            </div>\r\n            <div >\r\n                <h2>Send berkcoin</h2>\r\n                <form id=\"newOrder\" onSubmit={onTransfer}>\r\n                    <label>Amount: </label>\r\n                    <input type=\"number\" required\r\n                        value={transferAmount} onChange={(e) => setTransferAmount(e.target.value)} />\r\n                    <label>Recipient wallet address:</label>\r\n                    <input type=\"text\" required\r\n                        value={transferAddress} onChange={(e) => setTransferAddress(e.target.value)} />\r\n                    <button style={{ display: \"inline-block\", marginLeft: \"39%\" }}>Send berkcoin</button>\r\n                </form>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Trade","import { useState, useEffect } from \"react\";\r\nimport React from 'react';\r\n\r\nconst Staking = ({ account, contract, balance }) => {\r\n    // inputs\r\n    const [depositAmount, setDepositAmount] = useState(0);\r\n    const [stakeDuration, setStakeDuration] = useState(0);\r\n    const [refresh, setRefresh] = useState(false);\r\n\r\n    // views\r\n    const [stakedDuration, setStakedDuration] = useState(\"\");\r\n    const [stakedBalance, setStakedBalance] = useState(0);\r\n    const [stakeReward, setStakeReward] = useState(0);\r\n    const [calculatedStakeReward, setCalculatedStakeReward] = useState(0);\r\n    const [interestRate, setInterestRate] = useState(0);\r\n    const [availableStake, setAvailableStake] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        if (contract !== undefined) {\r\n            getStakedAmount();\r\n            getCurrentStakeReward();\r\n            getStakeCompletionDate();\r\n            getInterest();\r\n            getContractBalance();\r\n        }\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        calculateStakeReward();\r\n    }, [depositAmount, stakeDuration])\r\n\r\n    const onStake = async (e) => {\r\n        e.preventDefault();\r\n        await contract.methods.stake(stakeDuration * 60 * 60, depositAmount)\r\n            .send({ from: account });\r\n\r\n        setRefresh(!refresh);\r\n    }\r\n\r\n    const getStakedAmount = async () => {\r\n        const response = await contract.methods.getStakeAmount(account)\r\n            .call({ from: account });\r\n        setStakedBalance(response);\r\n    };\r\n\r\n    const getCurrentStakeReward = async () => {\r\n        const response = await contract.methods.getCurrentStakeReward(account)\r\n            .call({ from: account });\r\n        setStakeReward(response);\r\n    };\r\n\r\n    const getStakeCompletionDate = async () => {\r\n        const response = await contract.methods.getStakeCompletionDate(account)\r\n            .call({ from: account });\r\n\r\n        if (response === 0) {\r\n            setStakedDuration(\"NaN\");\r\n            return;\r\n        }\r\n\r\n        const date = new Date(response * 1000).toLocaleDateString(\"en-US\");\r\n        const time = new Date(response * 1000).toLocaleTimeString(\"en-US\")\r\n        setStakedDuration(date + \" \" + time);\r\n    };\r\n\r\n    const getInterest = async () => {\r\n        const response = await contract.methods.getInterest()\r\n            .call({ from: account });\r\n        setInterestRate(response);\r\n    }\r\n\r\n    const getContractBalance = async () => {\r\n        const response = await contract.methods.getContractBalance()\r\n            .call({ from: account });\r\n        setAvailableStake(response / 10 ** 18);\r\n    }\r\n\r\n    const calculateStakeReward = () => {\r\n        let stakeRate = interestRate;\r\n        stakeRate = stakeRate * stakeDuration * 60 * 60;\r\n\r\n        // More than 100 ETH:\r\n        if (depositAmount > 100) {\r\n            stakeRate = stakeRate * 2;\r\n        }\r\n        setCalculatedStakeReward(depositAmount * stakeRate / 1000000000);\r\n    }\r\n\r\n    const checkStakeStatus = async () => {\r\n        const currentTimeStamp = Math.round((new Date()).getTime() / 1000);\r\n        try {\r\n            if (stakedBalance === 0) {\r\n                throw \"Stake balance is 0!\";\r\n            }\r\n            await contract.methods.checkStakeStatus(account, currentTimeStamp)\r\n                .send({ from: account });\r\n\r\n            setRefresh(!refresh);\r\n        }\r\n        catch (error) {\r\n            alert(\"Error on withdraw!\");\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    if (contract === undefined) {\r\n        return (\r\n            <div>Mounting the smart contract, please wait.</div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>Wallet Public Address: {account} <span style={{ float: \"right\" }}> Total Circulation Value: {availableStake} ETH</span></h3>\r\n            <h3>Balance: {balance}</h3>\r\n            <h3>Staked amount: {stakedBalance}</h3>\r\n            <h3>Earnings from staking : {stakeReward}</h3>\r\n            <h3>Staking will end : {stakedDuration}</h3>\r\n            <button onClick={checkStakeStatus} style={{ display: \"inline-block\" }}>Withdraw stake</button>\r\n\r\n            <div id=\"trade\">\r\n                <h2>Stake berkcoin</h2>\r\n                <form id=\"newOrder\" onSubmit={onStake}>\r\n                    <label>Stake Amount: </label>\r\n                    <input type=\"number\" required\r\n                        value={depositAmount} onChange={(e) => setDepositAmount(e.target.value)} />\r\n                    <label>Duration (hours): </label>\r\n                    <input type=\"number\" required\r\n                        value={stakeDuration} onChange={(e) => setStakeDuration(e.target.value)} />\r\n                    <h3 style={{ color: \"green\", textAlign: \"center\" }}>You will earn {calculatedStakeReward} berkcoins after stake completion.</h3>\r\n                    <button style={{ display: \"inline-block\", marginLeft: \"36%\" }}>Stake berkcoin</button>\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Staking","import React from 'react'\r\nexport const Header = ({ account, connect }) => {\r\n    return (\r\n        <div className='header'>\r\n            <span style={{ float: \"left\" }}>Wallet Connection Status: {\r\n                account === undefined ?\r\n                    <span onClick={connect} style={{ color: \"red\" }}>Not Connected</span> :\r\n                    <span style={{ color: \"green\" }}>Connected</span>\r\n            }\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\"\nimport { useState, useEffect } from \"react\"\n\nimport getWeb3 from \"./services/getWeb3\";\nimport BerkToken from \"./contracts/BerkToken\";\n\n\nimport Nav from \"./components/PageComponents/Nav\";\nimport Wallet from \"./components/TokenComponents/Wallet\";\nimport Market from \"./components/CollectibleComponents/Market\";\nimport Trade from \"./components/TokenComponents/Trade\";\nimport Staking from \"./components/TokenComponents/Staking\";\nimport { Header } from './components/PageComponents/Header';\nimport LoadingTriangle from './components/PageComponents/LoadingTriangle';\n\nfunction App() {\n  // Rewriting truffle generated code for react hooks:\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [contract, setContract] = useState(undefined);\n  const [balance, setBalance] = useState(0);\n  const [ethBalance, setEthBalance] = useState(0);\n\n  useEffect(() => {\n    componentDidMount();\n  }, [])\n\n  useEffect(() => {\n    if (web3 !== undefined && accounts !== undefined && contract !== undefined) {\n      getBalance();\n    }\n  }, [web3, accounts, contract])\n\n  const componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BerkToken.networks[networkId];\n      const instance = new web3.eth.Contract(\n        BerkToken.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      setWeb3(web3);\n      setAccounts(accounts);\n      setContract(instance);\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  const getBalance = async () => {\n    const response = await contract.methods.getBalance(accounts[0])\n      .call({ from: accounts[0] });\n    setBalance(response);\n    const ethBalance = await web3.eth.getBalance(accounts[0]);\n    setEthBalance(web3.utils.fromWei(ethBalance, 'ether'));\n  };\n\n\n  if (web3 === undefined || accounts === undefined || contract === undefined) {\n    return (\n      <Router basename='berkcoin'>\n        <Header\n          account={undefined}\n          connect={() => window.location.reload()} />\n        <Nav />\n        <h2 style={{ textAlign: \"center\" }}>Waiting for wallet connection...</h2>\n        <LoadingTriangle />\n      </Router>\n    );\n  }\n\n  return (\n    <Router basename='berkcoin'>\n      <Header\n        account={accounts[0]}\n      />\n      <Nav />\n      <Routes>\n        <Route path='/' element={<Navigate to={\"/wallet\"} />} />\n\n        <Route path='/wallet' element={<Wallet\n          web3={web3}\n          account={accounts[0]}\n          balance={balance} />} />\n\n        <Route path='/market' element={<Market\n          account={accounts[0]}\n          contract={contract}\n          refresher={() => getBalance()} />} />\n\n        <Route path='/trade' element={<Trade\n          account={accounts[0]}\n          contract={contract}\n          balance={balance}\n          ethBalance={ethBalance}\n          getBalance={getBalance} />} />\n\n        <Route path='/staking' element={<Staking\n          account={accounts[0]}\n          contract={contract}\n          balance={balance} />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './services/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}